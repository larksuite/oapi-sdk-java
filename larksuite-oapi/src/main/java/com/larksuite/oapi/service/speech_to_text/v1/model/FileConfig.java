// Code generated by lark suite oapi sdk gen
package com.larksuite.oapi.service.speech_to_text.v1.model;
import com.google.gson.annotations.SerializedName;
import com.google.gson.annotations.SerializedName;
import com.larksuite.oapi.core.annotation.Body;
import com.larksuite.oapi.core.annotation.Path;
import com.larksuite.oapi.core.annotation.Query;
import java.io.File;
import java.io.ByteArrayOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import com.larksuite.oapi.core.utils.Strings;
import com.larksuite.oapi.core.response.BaseResponse;
public class FileConfig {
    @SerializedName("file_id")
    private String fileId;
    @SerializedName("format")
    private String format;
    @SerializedName("engine_type")
    private String engineType;
    public String getFileId() {
        return this.fileId;
    }

    public void setFileId(String fileId) {
        this.fileId = fileId;
    }

    public String getFormat() {
        return this.format;
    }

    public void setFormat(String format) {
        this.format = format;
    }

    public String getEngineType() {
        return this.engineType;
    }

    public void setEngineType(String engineType) {
        this.engineType = engineType;
    }


// builder 开始
  public FileConfig(){}

  public FileConfig(Builder builder){
      this.fileId = builder.fileId;
      this.format = builder.format;
      this.engineType = builder.engineType;
  }

    public static class Builder {
        private String fileId;
        private String format;
        private String engineType;
        public Builder fileId(String fileId) {
             this.fileId = fileId;
             return this;
        }
    
        public Builder format(String format) {
             this.format = format;
             return this;
        }
    
        public Builder engineType(String engineType) {
             this.engineType = engineType;
             return this;
        }
    
    
    public FileConfig build(){
        return new FileConfig(this);
      }
    }

    public static Builder newBuilder() {
        return new Builder();
    }
}
