// Code generated by lark suite oapi sdk gen
package com.larksuite.oapi.service.im.v1;

import com.larksuite.oapi.core.token.AccessTokenType;
import com.larksuite.oapi.core.Transport;
import com.larksuite.oapi.core.response.RawResponse;
import com.larksuite.oapi.core.utils.UnmarshalRespUtil;
import com.larksuite.oapi.event.IEventHandler;
import com.larksuite.oapi.core.utils.Sets;
import com.larksuite.oapi.core.Config;
import com.larksuite.oapi.core.request.RequestOptions;
import java.io.ByteArrayOutputStream;
import com.larksuite.oapi.event.model.BaseEvent;
import com.larksuite.oapi.event.model.BaseEventV2;
import com.larksuite.oapi.service.im.v1.model.*;
import java.io.*;
import java.util.Map;
import java.util.HashMap;
import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;

public class ImService {
    private final BatchMessage batchMessage;
    private final Chat chat;
    private final ChatAnnouncement chatAnnouncement;
    private final ChatManagers chatManagers;
    private final ChatMemberBot chatMemberBot;
    private final ChatMemberUser chatMemberUser;
    private final ChatMembers chatMembers;
    private final ChatModeration chatModeration;
    private final ChatTab chatTab;
    private final ChatTopNotice chatTopNotice;
    private final File file;
    private final Image image;
    private final Message message;
    private final MessageReaction messageReaction;
    private final MessageResource messageResource;

    public ImService(Config config) {
        this.batchMessage = new BatchMessage(config);
        this.chat = new Chat(config);
        this.chatAnnouncement = new ChatAnnouncement(config);
        this.chatManagers = new ChatManagers(config);
        this.chatMemberBot = new ChatMemberBot(config);
        this.chatMemberUser = new ChatMemberUser(config);
        this.chatMembers = new ChatMembers(config);
        this.chatModeration = new ChatModeration(config);
        this.chatTab = new ChatTab(config);
        this.chatTopNotice = new ChatTopNotice(config);
        this.file = new File(config);
        this.image = new Image(config);
        this.message = new Message(config);
        this.messageReaction = new MessageReaction(config);
        this.messageResource = new MessageResource(config);
    }
    public BatchMessage batchMessage() {
        return batchMessage;
    }

    public static class BatchMessage {
        private final Config config;

        public BatchMessage(Config config) {
            this.config = config;
        }
    
        public DeleteBatchMessageResp delete(DeleteBatchMessageReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "DELETE"
                       ,"/open-apis/im/v1/batch_messages/:batch_message_id"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           DeleteBatchMessageResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, DeleteBatchMessageResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public DeleteBatchMessageResp delete(DeleteBatchMessageReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "DELETE"
                       ,"/open-apis/im/v1/batch_messages/:batch_message_id"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           DeleteBatchMessageResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, DeleteBatchMessageResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public GetProgressBatchMessageResp getProgress(GetProgressBatchMessageReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/im/v1/batch_messages/:batch_message_id/get_progress"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           GetProgressBatchMessageResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, GetProgressBatchMessageResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public GetProgressBatchMessageResp getProgress(GetProgressBatchMessageReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/im/v1/batch_messages/:batch_message_id/get_progress"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           GetProgressBatchMessageResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, GetProgressBatchMessageResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public ReadUserBatchMessageResp readUser(ReadUserBatchMessageReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/im/v1/batch_messages/:batch_message_id/read_user"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           ReadUserBatchMessageResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, ReadUserBatchMessageResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public ReadUserBatchMessageResp readUser(ReadUserBatchMessageReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/im/v1/batch_messages/:batch_message_id/read_user"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           ReadUserBatchMessageResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, ReadUserBatchMessageResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    }

    public Chat chat() {
        return chat;
    }

    public static class Chat {
        private final Config config;

        public Chat(Config config) {
            this.config = config;
        }
    
        public CreateChatResp create(CreateChatReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/im/v1/chats"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           CreateChatResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, CreateChatResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public CreateChatResp create(CreateChatReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/im/v1/chats"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           CreateChatResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, CreateChatResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public DeleteChatResp delete(DeleteChatReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "DELETE"
                       ,"/open-apis/im/v1/chats/:chat_id"
                       ,Sets.newHashSet(AccessTokenType.User, AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           DeleteChatResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, DeleteChatResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public DeleteChatResp delete(DeleteChatReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "DELETE"
                       ,"/open-apis/im/v1/chats/:chat_id"
                       ,Sets.newHashSet(AccessTokenType.User, AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           DeleteChatResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, DeleteChatResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public GetChatResp get(GetChatReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/im/v1/chats/:chat_id"
                       ,Sets.newHashSet(AccessTokenType.User, AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           GetChatResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, GetChatResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public GetChatResp get(GetChatReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/im/v1/chats/:chat_id"
                       ,Sets.newHashSet(AccessTokenType.User, AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           GetChatResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, GetChatResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public ListChatResp list(ListChatReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/im/v1/chats"
                       ,Sets.newHashSet(AccessTokenType.User, AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           ListChatResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, ListChatResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public ListChatResp list(ListChatReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/im/v1/chats"
                       ,Sets.newHashSet(AccessTokenType.User, AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           ListChatResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, ListChatResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public SearchChatResp search(SearchChatReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/im/v1/chats/search"
                       ,Sets.newHashSet(AccessTokenType.User, AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           SearchChatResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, SearchChatResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public SearchChatResp search(SearchChatReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/im/v1/chats/search"
                       ,Sets.newHashSet(AccessTokenType.User, AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           SearchChatResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, SearchChatResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public UpdateChatResp update(UpdateChatReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "PUT"
                       ,"/open-apis/im/v1/chats/:chat_id"
                       ,Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
                       ,req);
	       
           // 反序列化
           UpdateChatResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, UpdateChatResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public UpdateChatResp update(UpdateChatReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "PUT"
                       ,"/open-apis/im/v1/chats/:chat_id"
                       ,Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
                       ,req);
            
           // 反序列化
           UpdateChatResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, UpdateChatResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    }

    public ChatAnnouncement chatAnnouncement() {
        return chatAnnouncement;
    }

    public static class ChatAnnouncement {
        private final Config config;

        public ChatAnnouncement(Config config) {
            this.config = config;
        }
    
        public GetChatAnnouncementResp get(GetChatAnnouncementReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/im/v1/chats/:chat_id/announcement"
                       ,Sets.newHashSet(AccessTokenType.User, AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           GetChatAnnouncementResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, GetChatAnnouncementResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public GetChatAnnouncementResp get(GetChatAnnouncementReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/im/v1/chats/:chat_id/announcement"
                       ,Sets.newHashSet(AccessTokenType.User, AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           GetChatAnnouncementResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, GetChatAnnouncementResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public PatchChatAnnouncementResp patch(PatchChatAnnouncementReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "PATCH"
                       ,"/open-apis/im/v1/chats/:chat_id/announcement"
                       ,Sets.newHashSet(AccessTokenType.User, AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           PatchChatAnnouncementResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, PatchChatAnnouncementResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public PatchChatAnnouncementResp patch(PatchChatAnnouncementReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "PATCH"
                       ,"/open-apis/im/v1/chats/:chat_id/announcement"
                       ,Sets.newHashSet(AccessTokenType.User, AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           PatchChatAnnouncementResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, PatchChatAnnouncementResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    }

    public ChatManagers chatManagers() {
        return chatManagers;
    }

    public static class ChatManagers {
        private final Config config;

        public ChatManagers(Config config) {
            this.config = config;
        }
    
        public AddManagersChatManagersResp addManagers(AddManagersChatManagersReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/im/v1/chats/:chat_id/managers/add_managers"
                       ,Sets.newHashSet(AccessTokenType.User, AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           AddManagersChatManagersResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, AddManagersChatManagersResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public AddManagersChatManagersResp addManagers(AddManagersChatManagersReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/im/v1/chats/:chat_id/managers/add_managers"
                       ,Sets.newHashSet(AccessTokenType.User, AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           AddManagersChatManagersResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, AddManagersChatManagersResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public DeleteManagersChatManagersResp deleteManagers(DeleteManagersChatManagersReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/im/v1/chats/:chat_id/managers/delete_managers"
                       ,Sets.newHashSet(AccessTokenType.User, AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           DeleteManagersChatManagersResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, DeleteManagersChatManagersResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public DeleteManagersChatManagersResp deleteManagers(DeleteManagersChatManagersReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/im/v1/chats/:chat_id/managers/delete_managers"
                       ,Sets.newHashSet(AccessTokenType.User, AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           DeleteManagersChatManagersResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, DeleteManagersChatManagersResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    }

    public ChatMemberBot chatMemberBot() {
        return chatMemberBot;
    }

    public static class ChatMemberBot {
        private final Config config;

        public ChatMemberBot(Config config) {
            this.config = config;
        }
    }

    public ChatMemberUser chatMemberUser() {
        return chatMemberUser;
    }

    public static class ChatMemberUser {
        private final Config config;

        public ChatMemberUser(Config config) {
            this.config = config;
        }
    }

    public ChatMembers chatMembers() {
        return chatMembers;
    }

    public static class ChatMembers {
        private final Config config;

        public ChatMembers(Config config) {
            this.config = config;
        }
    
        public CreateChatMembersResp create(CreateChatMembersReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/im/v1/chats/:chat_id/members"
                       ,Sets.newHashSet(AccessTokenType.User, AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           CreateChatMembersResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, CreateChatMembersResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public CreateChatMembersResp create(CreateChatMembersReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/im/v1/chats/:chat_id/members"
                       ,Sets.newHashSet(AccessTokenType.User, AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           CreateChatMembersResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, CreateChatMembersResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public DeleteChatMembersResp delete(DeleteChatMembersReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "DELETE"
                       ,"/open-apis/im/v1/chats/:chat_id/members"
                       ,Sets.newHashSet(AccessTokenType.User, AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           DeleteChatMembersResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, DeleteChatMembersResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public DeleteChatMembersResp delete(DeleteChatMembersReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "DELETE"
                       ,"/open-apis/im/v1/chats/:chat_id/members"
                       ,Sets.newHashSet(AccessTokenType.User, AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           DeleteChatMembersResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, DeleteChatMembersResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public GetChatMembersResp get(GetChatMembersReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/im/v1/chats/:chat_id/members"
                       ,Sets.newHashSet(AccessTokenType.User, AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           GetChatMembersResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, GetChatMembersResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public GetChatMembersResp get(GetChatMembersReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/im/v1/chats/:chat_id/members"
                       ,Sets.newHashSet(AccessTokenType.User, AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           GetChatMembersResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, GetChatMembersResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public IsInChatChatMembersResp isInChat(IsInChatChatMembersReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/im/v1/chats/:chat_id/members/is_in_chat"
                       ,Sets.newHashSet(AccessTokenType.User, AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           IsInChatChatMembersResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, IsInChatChatMembersResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public IsInChatChatMembersResp isInChat(IsInChatChatMembersReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/im/v1/chats/:chat_id/members/is_in_chat"
                       ,Sets.newHashSet(AccessTokenType.User, AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           IsInChatChatMembersResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, IsInChatChatMembersResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public MeJoinChatMembersResp meJoin(MeJoinChatMembersReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "PATCH"
                       ,"/open-apis/im/v1/chats/:chat_id/members/me_join"
                       ,Sets.newHashSet(AccessTokenType.User, AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           MeJoinChatMembersResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, MeJoinChatMembersResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public MeJoinChatMembersResp meJoin(MeJoinChatMembersReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "PATCH"
                       ,"/open-apis/im/v1/chats/:chat_id/members/me_join"
                       ,Sets.newHashSet(AccessTokenType.User, AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           MeJoinChatMembersResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, MeJoinChatMembersResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    }

    public ChatModeration chatModeration() {
        return chatModeration;
    }

    public static class ChatModeration {
        private final Config config;

        public ChatModeration(Config config) {
            this.config = config;
        }
    
        public GetChatModerationResp get(GetChatModerationReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/im/v1/chats/:chat_id/moderation"
                       ,Sets.newHashSet(AccessTokenType.User, AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           GetChatModerationResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, GetChatModerationResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public GetChatModerationResp get(GetChatModerationReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/im/v1/chats/:chat_id/moderation"
                       ,Sets.newHashSet(AccessTokenType.User, AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           GetChatModerationResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, GetChatModerationResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public UpdateChatModerationResp update(UpdateChatModerationReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "PUT"
                       ,"/open-apis/im/v1/chats/:chat_id/moderation"
                       ,Sets.newHashSet(AccessTokenType.User, AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           UpdateChatModerationResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, UpdateChatModerationResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public UpdateChatModerationResp update(UpdateChatModerationReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "PUT"
                       ,"/open-apis/im/v1/chats/:chat_id/moderation"
                       ,Sets.newHashSet(AccessTokenType.User, AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           UpdateChatModerationResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, UpdateChatModerationResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    }

    public ChatTab chatTab() {
        return chatTab;
    }

    public static class ChatTab {
        private final Config config;

        public ChatTab(Config config) {
            this.config = config;
        }
    
        public CreateChatTabResp create(CreateChatTabReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/im/v1/chats/:chat_id/chat_tabs"
                       ,Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
                       ,req);
	       
           // 反序列化
           CreateChatTabResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, CreateChatTabResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public CreateChatTabResp create(CreateChatTabReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/im/v1/chats/:chat_id/chat_tabs"
                       ,Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
                       ,req);
            
           // 反序列化
           CreateChatTabResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, CreateChatTabResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public DeleteTabsChatTabResp deleteTabs(DeleteTabsChatTabReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "DELETE"
                       ,"/open-apis/im/v1/chats/:chat_id/chat_tabs/delete_tabs"
                       ,Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
                       ,req);
	       
           // 反序列化
           DeleteTabsChatTabResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, DeleteTabsChatTabResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public DeleteTabsChatTabResp deleteTabs(DeleteTabsChatTabReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "DELETE"
                       ,"/open-apis/im/v1/chats/:chat_id/chat_tabs/delete_tabs"
                       ,Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
                       ,req);
            
           // 反序列化
           DeleteTabsChatTabResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, DeleteTabsChatTabResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public ListTabsChatTabResp listTabs(ListTabsChatTabReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/im/v1/chats/:chat_id/chat_tabs/list_tabs"
                       ,Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
                       ,req);
	       
           // 反序列化
           ListTabsChatTabResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, ListTabsChatTabResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public ListTabsChatTabResp listTabs(ListTabsChatTabReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/im/v1/chats/:chat_id/chat_tabs/list_tabs"
                       ,Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
                       ,req);
            
           // 反序列化
           ListTabsChatTabResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, ListTabsChatTabResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public SortTabsChatTabResp sortTabs(SortTabsChatTabReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/im/v1/chats/:chat_id/chat_tabs/sort_tabs"
                       ,Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
                       ,req);
	       
           // 反序列化
           SortTabsChatTabResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, SortTabsChatTabResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public SortTabsChatTabResp sortTabs(SortTabsChatTabReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/im/v1/chats/:chat_id/chat_tabs/sort_tabs"
                       ,Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
                       ,req);
            
           // 反序列化
           SortTabsChatTabResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, SortTabsChatTabResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public UpdateTabsChatTabResp updateTabs(UpdateTabsChatTabReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/im/v1/chats/:chat_id/chat_tabs/update_tabs"
                       ,Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
                       ,req);
	       
           // 反序列化
           UpdateTabsChatTabResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, UpdateTabsChatTabResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public UpdateTabsChatTabResp updateTabs(UpdateTabsChatTabReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/im/v1/chats/:chat_id/chat_tabs/update_tabs"
                       ,Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
                       ,req);
            
           // 反序列化
           UpdateTabsChatTabResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, UpdateTabsChatTabResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    }

    public ChatTopNotice chatTopNotice() {
        return chatTopNotice;
    }

    public static class ChatTopNotice {
        private final Config config;

        public ChatTopNotice(Config config) {
            this.config = config;
        }
    
        public DeleteTopNoticeChatTopNoticeResp deleteTopNotice(DeleteTopNoticeChatTopNoticeReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/im/v1/chats/:chat_id/top_notice/delete_top_notice"
                       ,Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
                       ,req);
	       
           // 反序列化
           DeleteTopNoticeChatTopNoticeResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, DeleteTopNoticeChatTopNoticeResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public DeleteTopNoticeChatTopNoticeResp deleteTopNotice(DeleteTopNoticeChatTopNoticeReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/im/v1/chats/:chat_id/top_notice/delete_top_notice"
                       ,Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
                       ,req);
            
           // 反序列化
           DeleteTopNoticeChatTopNoticeResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, DeleteTopNoticeChatTopNoticeResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public PutTopNoticeChatTopNoticeResp putTopNotice(PutTopNoticeChatTopNoticeReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/im/v1/chats/:chat_id/top_notice/put_top_notice"
                       ,Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
                       ,req);
	       
           // 反序列化
           PutTopNoticeChatTopNoticeResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, PutTopNoticeChatTopNoticeResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public PutTopNoticeChatTopNoticeResp putTopNotice(PutTopNoticeChatTopNoticeReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/im/v1/chats/:chat_id/top_notice/put_top_notice"
                       ,Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
                       ,req);
            
           // 反序列化
           PutTopNoticeChatTopNoticeResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, PutTopNoticeChatTopNoticeResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    }

    public File file() {
        return file;
    }

    public static class File {
        private final Config config;

        public File(Config config) {
            this.config = config;
        }
    
        public CreateFileResp create(CreateFileReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }
            reqOptions.setSupportUpload(true);

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/im/v1/files"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           CreateFileResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, CreateFileResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public CreateFileResp create(CreateFileReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();
            reqOptions.setSupportUpload(true);

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/im/v1/files"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           CreateFileResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, CreateFileResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public GetFileResp get(GetFileReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }
            reqOptions.setSupportDownLoad(true);

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/im/v1/files/:file_key"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
            if (httpResponse.getStatusCode() == 200) {
                GetFileResp resp = new GetFileResp();
                resp.setRawResponse(httpResponse);
                ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
                outputStream.write(httpResponse.getBody());
                resp.setFileStream(outputStream);
                resp.setFileName(httpResponse.getFileName());
                return  resp;
            }
           // 反序列化
           GetFileResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, GetFileResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public GetFileResp get(GetFileReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();
            reqOptions.setSupportDownLoad(true);

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/im/v1/files/:file_key"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
            // 下载请求，返回流
            if (httpResponse.getStatusCode() == 200) {
                GetFileResp resp = new GetFileResp();
                resp.setRawResponse(httpResponse);
                ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
                outputStream.write(httpResponse.getBody());
                resp.setFileStream(outputStream);
                resp.setFileName(httpResponse.getFileName());
                return  resp;
            }
           // 反序列化
           GetFileResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, GetFileResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    }

    public Image image() {
        return image;
    }

    public static class Image {
        private final Config config;

        public Image(Config config) {
            this.config = config;
        }
    
        public CreateImageResp create(CreateImageReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }
            reqOptions.setSupportUpload(true);

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/im/v1/images"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           CreateImageResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, CreateImageResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public CreateImageResp create(CreateImageReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();
            reqOptions.setSupportUpload(true);

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/im/v1/images"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           CreateImageResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, CreateImageResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public GetImageResp get(GetImageReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }
            reqOptions.setSupportDownLoad(true);

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/im/v1/images/:image_key"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
            if (httpResponse.getStatusCode() == 200) {
                GetImageResp resp = new GetImageResp();
                resp.setRawResponse(httpResponse);
                ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
                outputStream.write(httpResponse.getBody());
                resp.setFileStream(outputStream);
                resp.setFileName(httpResponse.getFileName());
                return  resp;
            }
           // 反序列化
           GetImageResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, GetImageResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public GetImageResp get(GetImageReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();
            reqOptions.setSupportDownLoad(true);

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/im/v1/images/:image_key"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
            // 下载请求，返回流
            if (httpResponse.getStatusCode() == 200) {
                GetImageResp resp = new GetImageResp();
                resp.setRawResponse(httpResponse);
                ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
                outputStream.write(httpResponse.getBody());
                resp.setFileStream(outputStream);
                resp.setFileName(httpResponse.getFileName());
                return  resp;
            }
           // 反序列化
           GetImageResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, GetImageResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    }

    public Message message() {
        return message;
    }

    public static class Message {
        private final Config config;

        public Message(Config config) {
            this.config = config;
        }
    
        public CreateMessageResp create(CreateMessageReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/im/v1/messages"
                       ,Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
                       ,req);
	       
           // 反序列化
           CreateMessageResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, CreateMessageResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public CreateMessageResp create(CreateMessageReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/im/v1/messages"
                       ,Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
                       ,req);
            
           // 反序列化
           CreateMessageResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, CreateMessageResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public DeleteMessageResp delete(DeleteMessageReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "DELETE"
                       ,"/open-apis/im/v1/messages/:message_id"
                       ,Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
                       ,req);
	       
           // 反序列化
           DeleteMessageResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, DeleteMessageResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public DeleteMessageResp delete(DeleteMessageReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "DELETE"
                       ,"/open-apis/im/v1/messages/:message_id"
                       ,Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
                       ,req);
            
           // 反序列化
           DeleteMessageResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, DeleteMessageResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public GetMessageResp get(GetMessageReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/im/v1/messages/:message_id"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           GetMessageResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, GetMessageResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public GetMessageResp get(GetMessageReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/im/v1/messages/:message_id"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           GetMessageResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, GetMessageResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public ListMessageResp list(ListMessageReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/im/v1/messages"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           ListMessageResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, ListMessageResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public ListMessageResp list(ListMessageReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/im/v1/messages"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           ListMessageResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, ListMessageResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public PatchMessageResp patch(PatchMessageReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "PATCH"
                       ,"/open-apis/im/v1/messages/:message_id"
                       ,Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
                       ,req);
	       
           // 反序列化
           PatchMessageResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, PatchMessageResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public PatchMessageResp patch(PatchMessageReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "PATCH"
                       ,"/open-apis/im/v1/messages/:message_id"
                       ,Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
                       ,req);
            
           // 反序列化
           PatchMessageResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, PatchMessageResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public ReadUsersMessageResp readUsers(ReadUsersMessageReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/im/v1/messages/:message_id/read_users"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           ReadUsersMessageResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, ReadUsersMessageResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public ReadUsersMessageResp readUsers(ReadUsersMessageReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/im/v1/messages/:message_id/read_users"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           ReadUsersMessageResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, ReadUsersMessageResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public ReplyMessageResp reply(ReplyMessageReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/im/v1/messages/:message_id/reply"
                       ,Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
                       ,req);
	       
           // 反序列化
           ReplyMessageResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, ReplyMessageResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public ReplyMessageResp reply(ReplyMessageReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/im/v1/messages/:message_id/reply"
                       ,Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
                       ,req);
            
           // 反序列化
           ReplyMessageResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, ReplyMessageResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public UrgentAppMessageResp urgentApp(UrgentAppMessageReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "PATCH"
                       ,"/open-apis/im/v1/messages/:message_id/urgent_app"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           UrgentAppMessageResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, UrgentAppMessageResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public UrgentAppMessageResp urgentApp(UrgentAppMessageReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "PATCH"
                       ,"/open-apis/im/v1/messages/:message_id/urgent_app"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           UrgentAppMessageResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, UrgentAppMessageResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public UrgentPhoneMessageResp urgentPhone(UrgentPhoneMessageReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "PATCH"
                       ,"/open-apis/im/v1/messages/:message_id/urgent_phone"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           UrgentPhoneMessageResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, UrgentPhoneMessageResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public UrgentPhoneMessageResp urgentPhone(UrgentPhoneMessageReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "PATCH"
                       ,"/open-apis/im/v1/messages/:message_id/urgent_phone"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           UrgentPhoneMessageResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, UrgentPhoneMessageResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public UrgentSmsMessageResp urgentSms(UrgentSmsMessageReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "PATCH"
                       ,"/open-apis/im/v1/messages/:message_id/urgent_sms"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           UrgentSmsMessageResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, UrgentSmsMessageResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public UrgentSmsMessageResp urgentSms(UrgentSmsMessageReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "PATCH"
                       ,"/open-apis/im/v1/messages/:message_id/urgent_sms"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           UrgentSmsMessageResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, UrgentSmsMessageResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    }

    public MessageReaction messageReaction() {
        return messageReaction;
    }

    public static class MessageReaction {
        private final Config config;

        public MessageReaction(Config config) {
            this.config = config;
        }
    
        public CreateMessageReactionResp create(CreateMessageReactionReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/im/v1/messages/:message_id/reactions"
                       ,Sets.newHashSet(AccessTokenType.User, AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           CreateMessageReactionResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, CreateMessageReactionResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public CreateMessageReactionResp create(CreateMessageReactionReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/im/v1/messages/:message_id/reactions"
                       ,Sets.newHashSet(AccessTokenType.User, AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           CreateMessageReactionResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, CreateMessageReactionResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public DeleteMessageReactionResp delete(DeleteMessageReactionReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "DELETE"
                       ,"/open-apis/im/v1/messages/:message_id/reactions/:reaction_id"
                       ,Sets.newHashSet(AccessTokenType.User, AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           DeleteMessageReactionResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, DeleteMessageReactionResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public DeleteMessageReactionResp delete(DeleteMessageReactionReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "DELETE"
                       ,"/open-apis/im/v1/messages/:message_id/reactions/:reaction_id"
                       ,Sets.newHashSet(AccessTokenType.User, AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           DeleteMessageReactionResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, DeleteMessageReactionResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public ListMessageReactionResp list(ListMessageReactionReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/im/v1/messages/:message_id/reactions"
                       ,Sets.newHashSet(AccessTokenType.User, AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           ListMessageReactionResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, ListMessageReactionResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public ListMessageReactionResp list(ListMessageReactionReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/im/v1/messages/:message_id/reactions"
                       ,Sets.newHashSet(AccessTokenType.User, AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           ListMessageReactionResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, ListMessageReactionResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    }

    public MessageResource messageResource() {
        return messageResource;
    }

    public static class MessageResource {
        private final Config config;

        public MessageResource(Config config) {
            this.config = config;
        }
    
        public GetMessageResourceResp get(GetMessageResourceReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }
            reqOptions.setSupportDownLoad(true);

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/im/v1/messages/:message_id/resources/:file_key"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
            if (httpResponse.getStatusCode() == 200) {
                GetMessageResourceResp resp = new GetMessageResourceResp();
                resp.setRawResponse(httpResponse);
                ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
                outputStream.write(httpResponse.getBody());
                resp.setFileStream(outputStream);
                resp.setFileName(httpResponse.getFileName());
                return  resp;
            }
           // 反序列化
           GetMessageResourceResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, GetMessageResourceResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public GetMessageResourceResp get(GetMessageResourceReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();
            reqOptions.setSupportDownLoad(true);

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/im/v1/messages/:message_id/resources/:file_key"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
            // 下载请求，返回流
            if (httpResponse.getStatusCode() == 200) {
                GetMessageResourceResp resp = new GetMessageResourceResp();
                resp.setRawResponse(httpResponse);
                ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
                outputStream.write(httpResponse.getBody());
                resp.setFileStream(outputStream);
                resp.setFileName(httpResponse.getFileName());
                return  resp;
            }
           // 反序列化
           GetMessageResourceResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, GetMessageResourceResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    }

    public abstract static class P2ChatDisbandedV1Handler implements IEventHandler<P2ChatDisbandedV1> {
        @Override
        public P2ChatDisbandedV1 getEvent() {
            return new P2ChatDisbandedV1();
        }
    }
    public abstract static class P2ChatUpdatedV1Handler implements IEventHandler<P2ChatUpdatedV1> {
        @Override
        public P2ChatUpdatedV1 getEvent() {
            return new P2ChatUpdatedV1();
        }
    }
    public abstract static class P2ChatMemberBotAddedV1Handler implements IEventHandler<P2ChatMemberBotAddedV1> {
        @Override
        public P2ChatMemberBotAddedV1 getEvent() {
            return new P2ChatMemberBotAddedV1();
        }
    }
    public abstract static class P2ChatMemberBotDeletedV1Handler implements IEventHandler<P2ChatMemberBotDeletedV1> {
        @Override
        public P2ChatMemberBotDeletedV1 getEvent() {
            return new P2ChatMemberBotDeletedV1();
        }
    }
    public abstract static class P2ChatMemberUserAddedV1Handler implements IEventHandler<P2ChatMemberUserAddedV1> {
        @Override
        public P2ChatMemberUserAddedV1 getEvent() {
            return new P2ChatMemberUserAddedV1();
        }
    }
    public abstract static class P2ChatMemberUserDeletedV1Handler implements IEventHandler<P2ChatMemberUserDeletedV1> {
        @Override
        public P2ChatMemberUserDeletedV1 getEvent() {
            return new P2ChatMemberUserDeletedV1();
        }
    }
    public abstract static class P2ChatMemberUserWithdrawnV1Handler implements IEventHandler<P2ChatMemberUserWithdrawnV1> {
        @Override
        public P2ChatMemberUserWithdrawnV1 getEvent() {
            return new P2ChatMemberUserWithdrawnV1();
        }
    }
    public abstract static class P2MessageReadV1Handler implements IEventHandler<P2MessageReadV1> {
        @Override
        public P2MessageReadV1 getEvent() {
            return new P2MessageReadV1();
        }
    }
    public abstract static class P2MessageReceiveV1Handler implements IEventHandler<P2MessageReceiveV1> {
        @Override
        public P2MessageReceiveV1 getEvent() {
            return new P2MessageReceiveV1();
        }
    }
    public abstract static class P2MessageReactionCreatedV1Handler implements IEventHandler<P2MessageReactionCreatedV1> {
        @Override
        public P2MessageReactionCreatedV1 getEvent() {
            return new P2MessageReactionCreatedV1();
        }
    }
    public abstract static class P2MessageReactionDeletedV1Handler implements IEventHandler<P2MessageReactionDeletedV1> {
        @Override
        public P2MessageReactionDeletedV1 getEvent() {
            return new P2MessageReactionDeletedV1();
        }
    }
    public abstract static class P1MessageReadV1Handler implements IEventHandler<P1MessageReadV1> {
        @Override
        public P1MessageReadV1 getEvent() {
            return new P1MessageReadV1();
        }
    }

}