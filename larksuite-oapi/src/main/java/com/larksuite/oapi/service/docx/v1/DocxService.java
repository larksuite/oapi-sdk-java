// Code generated by lark suite oapi sdk gen
package com.larksuite.oapi.service.docx.v1;

import com.larksuite.oapi.core.Config;
import com.larksuite.oapi.core.Transport;
import com.larksuite.oapi.core.request.RequestOptions;
import com.larksuite.oapi.core.response.RawResponse;
import com.larksuite.oapi.core.token.AccessTokenType;
import com.larksuite.oapi.core.utils.Sets;
import com.larksuite.oapi.core.utils.UnmarshalRespUtil;
import com.larksuite.oapi.service.docx.v1.model.*;

public class DocxService {
    private final Document document;
    private final DocumentBlock documentBlock;
    private final DocumentBlockChildren documentBlockChildren;

    public DocxService(Config config) {
        this.document = new Document(config);
        this.documentBlock = new DocumentBlock(config);
        this.documentBlockChildren = new DocumentBlockChildren(config);
    }

    public Document document() {
        return document;
    }

    public DocumentBlock documentBlock() {
        return documentBlock;
    }

    public DocumentBlockChildren documentBlockChildren() {
        return documentBlockChildren;
    }

    public static class Document {
        private final Config config;

        public Document(Config config) {
            this.config = config;
        }

        public CreateDocumentResp create(CreateDocumentReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config, reqOptions, "POST"
                    , "/open-apis/docx/v1/documents"
                    , Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
                    , req);

            // 反序列化
            CreateDocumentResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, CreateDocumentResp.class);
            resp.setRawResponse(httpResponse);
            return resp;
        }

        public CreateDocumentResp create(CreateDocumentReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config, reqOptions, "POST"
                    , "/open-apis/docx/v1/documents"
                    , Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
                    , req);

            // 反序列化
            CreateDocumentResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, CreateDocumentResp.class);
            resp.setRawResponse(httpResponse);
            return resp;
        }

        public GetDocumentResp get(GetDocumentReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
                    , "/open-apis/docx/v1/documents/:document_id"
                    , Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
                    , req);

            // 反序列化
            GetDocumentResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, GetDocumentResp.class);
            resp.setRawResponse(httpResponse);
            return resp;
        }

        public GetDocumentResp get(GetDocumentReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
                    , "/open-apis/docx/v1/documents/:document_id"
                    , Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
                    , req);

            // 反序列化
            GetDocumentResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, GetDocumentResp.class);
            resp.setRawResponse(httpResponse);
            return resp;
        }

        public RawContentDocumentResp rawContent(RawContentDocumentReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
                    , "/open-apis/docx/v1/documents/:document_id/raw_content"
                    , Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
                    , req);

            // 反序列化
            RawContentDocumentResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, RawContentDocumentResp.class);
            resp.setRawResponse(httpResponse);
            return resp;
        }

        public RawContentDocumentResp rawContent(RawContentDocumentReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
                    , "/open-apis/docx/v1/documents/:document_id/raw_content"
                    , Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
                    , req);

            // 反序列化
            RawContentDocumentResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, RawContentDocumentResp.class);
            resp.setRawResponse(httpResponse);
            return resp;
        }
    }

    public static class DocumentBlock {
        private final Config config;

        public DocumentBlock(Config config) {
            this.config = config;
        }

        public BatchUpdateDocumentBlockResp batchUpdate(BatchUpdateDocumentBlockReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config, reqOptions, "PATCH"
                    , "/open-apis/docx/v1/documents/:document_id/blocks/batch_update"
                    , Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
                    , req);

            // 反序列化
            BatchUpdateDocumentBlockResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, BatchUpdateDocumentBlockResp.class);
            resp.setRawResponse(httpResponse);
            return resp;
        }

        public BatchUpdateDocumentBlockResp batchUpdate(BatchUpdateDocumentBlockReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config, reqOptions, "PATCH"
                    , "/open-apis/docx/v1/documents/:document_id/blocks/batch_update"
                    , Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
                    , req);

            // 反序列化
            BatchUpdateDocumentBlockResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, BatchUpdateDocumentBlockResp.class);
            resp.setRawResponse(httpResponse);
            return resp;
        }

        public GetDocumentBlockResp get(GetDocumentBlockReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
                    , "/open-apis/docx/v1/documents/:document_id/blocks/:block_id"
                    , Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
                    , req);

            // 反序列化
            GetDocumentBlockResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, GetDocumentBlockResp.class);
            resp.setRawResponse(httpResponse);
            return resp;
        }

        public GetDocumentBlockResp get(GetDocumentBlockReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
                    , "/open-apis/docx/v1/documents/:document_id/blocks/:block_id"
                    , Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
                    , req);

            // 反序列化
            GetDocumentBlockResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, GetDocumentBlockResp.class);
            resp.setRawResponse(httpResponse);
            return resp;
        }

        public ListDocumentBlockResp list(ListDocumentBlockReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
                    , "/open-apis/docx/v1/documents/:document_id/blocks"
                    , Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
                    , req);

            // 反序列化
            ListDocumentBlockResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, ListDocumentBlockResp.class);
            resp.setRawResponse(httpResponse);
            return resp;
        }

        public ListDocumentBlockResp list(ListDocumentBlockReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
                    , "/open-apis/docx/v1/documents/:document_id/blocks"
                    , Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
                    , req);

            // 反序列化
            ListDocumentBlockResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, ListDocumentBlockResp.class);
            resp.setRawResponse(httpResponse);
            return resp;
        }

        public PatchDocumentBlockResp patch(PatchDocumentBlockReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config, reqOptions, "PATCH"
                    , "/open-apis/docx/v1/documents/:document_id/blocks/:block_id"
                    , Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
                    , req);

            // 反序列化
            PatchDocumentBlockResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, PatchDocumentBlockResp.class);
            resp.setRawResponse(httpResponse);
            return resp;
        }

        public PatchDocumentBlockResp patch(PatchDocumentBlockReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config, reqOptions, "PATCH"
                    , "/open-apis/docx/v1/documents/:document_id/blocks/:block_id"
                    , Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
                    , req);

            // 反序列化
            PatchDocumentBlockResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, PatchDocumentBlockResp.class);
            resp.setRawResponse(httpResponse);
            return resp;
        }
    }

    public static class DocumentBlockChildren {
        private final Config config;

        public DocumentBlockChildren(Config config) {
            this.config = config;
        }

        public BatchDeleteDocumentBlockChildrenResp batchDelete(BatchDeleteDocumentBlockChildrenReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config, reqOptions, "DELETE"
                    , "/open-apis/docx/v1/documents/:document_id/blocks/:block_id/children/batch_delete"
                    , Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
                    , req);

            // 反序列化
            BatchDeleteDocumentBlockChildrenResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, BatchDeleteDocumentBlockChildrenResp.class);
            resp.setRawResponse(httpResponse);
            return resp;
        }

        public BatchDeleteDocumentBlockChildrenResp batchDelete(BatchDeleteDocumentBlockChildrenReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config, reqOptions, "DELETE"
                    , "/open-apis/docx/v1/documents/:document_id/blocks/:block_id/children/batch_delete"
                    , Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
                    , req);

            // 反序列化
            BatchDeleteDocumentBlockChildrenResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, BatchDeleteDocumentBlockChildrenResp.class);
            resp.setRawResponse(httpResponse);
            return resp;
        }

        public CreateDocumentBlockChildrenResp create(CreateDocumentBlockChildrenReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config, reqOptions, "POST"
                    , "/open-apis/docx/v1/documents/:document_id/blocks/:block_id/children"
                    , Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
                    , req);

            // 反序列化
            CreateDocumentBlockChildrenResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, CreateDocumentBlockChildrenResp.class);
            resp.setRawResponse(httpResponse);
            return resp;
        }

        public CreateDocumentBlockChildrenResp create(CreateDocumentBlockChildrenReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config, reqOptions, "POST"
                    , "/open-apis/docx/v1/documents/:document_id/blocks/:block_id/children"
                    , Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
                    , req);

            // 反序列化
            CreateDocumentBlockChildrenResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, CreateDocumentBlockChildrenResp.class);
            resp.setRawResponse(httpResponse);
            return resp;
        }

        public GetDocumentBlockChildrenResp get(GetDocumentBlockChildrenReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
                    , "/open-apis/docx/v1/documents/:document_id/blocks/:block_id/children"
                    , Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
                    , req);

            // 反序列化
            GetDocumentBlockChildrenResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, GetDocumentBlockChildrenResp.class);
            resp.setRawResponse(httpResponse);
            return resp;
        }

        public GetDocumentBlockChildrenResp get(GetDocumentBlockChildrenReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
                    , "/open-apis/docx/v1/documents/:document_id/blocks/:block_id/children"
                    , Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
                    , req);

            // 反序列化
            GetDocumentBlockChildrenResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, GetDocumentBlockChildrenResp.class);
            resp.setRawResponse(httpResponse);
            return resp;
        }
    }

}