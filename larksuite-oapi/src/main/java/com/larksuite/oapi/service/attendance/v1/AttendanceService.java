// Code generated by lark suite oapi sdk gen
package com.larksuite.oapi.service.attendance.v1;

import com.larksuite.oapi.core.token.AccessTokenType;
import com.larksuite.oapi.core.Transport;
import com.larksuite.oapi.core.response.RawResponse;
import com.larksuite.oapi.core.utils.UnmarshalRespUtil;
import com.larksuite.oapi.event.IEventHandler;
import com.larksuite.oapi.core.utils.Sets;
import com.larksuite.oapi.core.Config;
import com.larksuite.oapi.core.request.RequestOptions;
import java.io.ByteArrayOutputStream;
import com.larksuite.oapi.event.model.BaseEvent;
import com.larksuite.oapi.event.model.BaseEventV2;
import com.larksuite.oapi.service.attendance.v1.model.*;
import java.io.*;
import java.util.Map;
import java.util.HashMap;
import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;

public class AttendanceService {
    private final ApprovalInfo approvalInfo;
    private final File file;
    private final Group group;
    private final Shift shift;
    private final UserApproval userApproval;
    private final UserDailyShift userDailyShift;
    private final UserFlow userFlow;
    private final UserSetting userSetting;
    private final UserStatsData userStatsData;
    private final UserStatsField userStatsField;
    private final UserStatsView userStatsView;
    private final UserTask userTask;
    private final UserTaskRemedy userTaskRemedy;

    public AttendanceService(Config config) {
        this.approvalInfo = new ApprovalInfo(config);
        this.file = new File(config);
        this.group = new Group(config);
        this.shift = new Shift(config);
        this.userApproval = new UserApproval(config);
        this.userDailyShift = new UserDailyShift(config);
        this.userFlow = new UserFlow(config);
        this.userSetting = new UserSetting(config);
        this.userStatsData = new UserStatsData(config);
        this.userStatsField = new UserStatsField(config);
        this.userStatsView = new UserStatsView(config);
        this.userTask = new UserTask(config);
        this.userTaskRemedy = new UserTaskRemedy(config);
    }
    public ApprovalInfo approvalInfo() {
        return approvalInfo;
    }

    public static class ApprovalInfo {
        private final Config config;

        public ApprovalInfo(Config config) {
            this.config = config;
        }
    
        public ProcessApprovalInfoResp process(ProcessApprovalInfoReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/attendance/v1/approval_infos/process"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           ProcessApprovalInfoResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, ProcessApprovalInfoResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public ProcessApprovalInfoResp process(ProcessApprovalInfoReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/attendance/v1/approval_infos/process"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           ProcessApprovalInfoResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, ProcessApprovalInfoResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    }

    public File file() {
        return file;
    }

    public static class File {
        private final Config config;

        public File(Config config) {
            this.config = config;
        }
    
        public DownloadFileResp download(DownloadFileReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }
            reqOptions.setSupportDownLoad(true);

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/attendance/v1/files/:file_id/download"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
            if (httpResponse.getStatusCode() == 200) {
                DownloadFileResp resp = new DownloadFileResp();
                resp.setRawResponse(httpResponse);
                ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
                outputStream.write(httpResponse.getBody());
                resp.setFileStream(outputStream);
                resp.setFileName(httpResponse.getFileName());
                return  resp;
            }
           // 反序列化
           DownloadFileResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, DownloadFileResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public DownloadFileResp download(DownloadFileReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();
            reqOptions.setSupportDownLoad(true);

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/attendance/v1/files/:file_id/download"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
            // 下载请求，返回流
            if (httpResponse.getStatusCode() == 200) {
                DownloadFileResp resp = new DownloadFileResp();
                resp.setRawResponse(httpResponse);
                ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
                outputStream.write(httpResponse.getBody());
                resp.setFileStream(outputStream);
                resp.setFileName(httpResponse.getFileName());
                return  resp;
            }
           // 反序列化
           DownloadFileResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, DownloadFileResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public UploadFileResp upload(UploadFileReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }
            reqOptions.setSupportUpload(true);

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/attendance/v1/files/upload"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           UploadFileResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, UploadFileResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public UploadFileResp upload(UploadFileReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();
            reqOptions.setSupportUpload(true);

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/attendance/v1/files/upload"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           UploadFileResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, UploadFileResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    }

    public Group group() {
        return group;
    }

    public static class Group {
        private final Config config;

        public Group(Config config) {
            this.config = config;
        }
    
        public CreateGroupResp create(CreateGroupReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/attendance/v1/groups"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           CreateGroupResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, CreateGroupResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public CreateGroupResp create(CreateGroupReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/attendance/v1/groups"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           CreateGroupResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, CreateGroupResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public DeleteGroupResp delete(DeleteGroupReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "DELETE"
                       ,"/open-apis/attendance/v1/groups/:group_id"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           DeleteGroupResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, DeleteGroupResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public DeleteGroupResp delete(DeleteGroupReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "DELETE"
                       ,"/open-apis/attendance/v1/groups/:group_id"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           DeleteGroupResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, DeleteGroupResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public GetGroupResp get(GetGroupReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/attendance/v1/groups/:group_id"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           GetGroupResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, GetGroupResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public GetGroupResp get(GetGroupReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/attendance/v1/groups/:group_id"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           GetGroupResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, GetGroupResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public ListGroupResp list(ListGroupReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/attendance/v1/groups"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           ListGroupResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, ListGroupResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public ListGroupResp list(ListGroupReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/attendance/v1/groups"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           ListGroupResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, ListGroupResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public SearchGroupResp search(SearchGroupReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/attendance/v1/groups/search"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           SearchGroupResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, SearchGroupResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public SearchGroupResp search(SearchGroupReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/attendance/v1/groups/search"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           SearchGroupResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, SearchGroupResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    }

    public Shift shift() {
        return shift;
    }

    public static class Shift {
        private final Config config;

        public Shift(Config config) {
            this.config = config;
        }
    
        public CreateShiftResp create(CreateShiftReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/attendance/v1/shifts"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           CreateShiftResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, CreateShiftResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public CreateShiftResp create(CreateShiftReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/attendance/v1/shifts"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           CreateShiftResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, CreateShiftResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public DeleteShiftResp delete(DeleteShiftReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "DELETE"
                       ,"/open-apis/attendance/v1/shifts/:shift_id"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           DeleteShiftResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, DeleteShiftResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public DeleteShiftResp delete(DeleteShiftReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "DELETE"
                       ,"/open-apis/attendance/v1/shifts/:shift_id"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           DeleteShiftResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, DeleteShiftResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public GetShiftResp get(GetShiftReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/attendance/v1/shifts/:shift_id"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           GetShiftResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, GetShiftResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public GetShiftResp get(GetShiftReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/attendance/v1/shifts/:shift_id"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           GetShiftResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, GetShiftResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public ListShiftResp list(ListShiftReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/attendance/v1/shifts"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           ListShiftResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, ListShiftResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public ListShiftResp list(ListShiftReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/attendance/v1/shifts"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           ListShiftResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, ListShiftResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public QueryShiftResp query(QueryShiftReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/attendance/v1/shifts/query"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           QueryShiftResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, QueryShiftResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public QueryShiftResp query(QueryShiftReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/attendance/v1/shifts/query"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           QueryShiftResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, QueryShiftResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    }

    public UserApproval userApproval() {
        return userApproval;
    }

    public static class UserApproval {
        private final Config config;

        public UserApproval(Config config) {
            this.config = config;
        }
    
        public CreateUserApprovalResp create(CreateUserApprovalReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/attendance/v1/user_approvals"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           CreateUserApprovalResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, CreateUserApprovalResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public CreateUserApprovalResp create(CreateUserApprovalReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/attendance/v1/user_approvals"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           CreateUserApprovalResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, CreateUserApprovalResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public QueryUserApprovalResp query(QueryUserApprovalReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/attendance/v1/user_approvals/query"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           QueryUserApprovalResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, QueryUserApprovalResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public QueryUserApprovalResp query(QueryUserApprovalReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/attendance/v1/user_approvals/query"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           QueryUserApprovalResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, QueryUserApprovalResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    }

    public UserDailyShift userDailyShift() {
        return userDailyShift;
    }

    public static class UserDailyShift {
        private final Config config;

        public UserDailyShift(Config config) {
            this.config = config;
        }
    
        public BatchCreateUserDailyShiftResp batchCreate(BatchCreateUserDailyShiftReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/attendance/v1/user_daily_shifts/batch_create"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           BatchCreateUserDailyShiftResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, BatchCreateUserDailyShiftResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public BatchCreateUserDailyShiftResp batchCreate(BatchCreateUserDailyShiftReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/attendance/v1/user_daily_shifts/batch_create"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           BatchCreateUserDailyShiftResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, BatchCreateUserDailyShiftResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public QueryUserDailyShiftResp query(QueryUserDailyShiftReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/attendance/v1/user_daily_shifts/query"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           QueryUserDailyShiftResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, QueryUserDailyShiftResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public QueryUserDailyShiftResp query(QueryUserDailyShiftReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/attendance/v1/user_daily_shifts/query"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           QueryUserDailyShiftResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, QueryUserDailyShiftResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    }

    public UserFlow userFlow() {
        return userFlow;
    }

    public static class UserFlow {
        private final Config config;

        public UserFlow(Config config) {
            this.config = config;
        }
    
        public BatchCreateUserFlowResp batchCreate(BatchCreateUserFlowReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/attendance/v1/user_flows/batch_create"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           BatchCreateUserFlowResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, BatchCreateUserFlowResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public BatchCreateUserFlowResp batchCreate(BatchCreateUserFlowReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/attendance/v1/user_flows/batch_create"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           BatchCreateUserFlowResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, BatchCreateUserFlowResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public GetUserFlowResp get(GetUserFlowReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/attendance/v1/user_flows/:user_flow_id"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           GetUserFlowResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, GetUserFlowResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public GetUserFlowResp get(GetUserFlowReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/attendance/v1/user_flows/:user_flow_id"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           GetUserFlowResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, GetUserFlowResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public QueryUserFlowResp query(QueryUserFlowReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/attendance/v1/user_flows/query"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           QueryUserFlowResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, QueryUserFlowResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public QueryUserFlowResp query(QueryUserFlowReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/attendance/v1/user_flows/query"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           QueryUserFlowResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, QueryUserFlowResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    }

    public UserSetting userSetting() {
        return userSetting;
    }

    public static class UserSetting {
        private final Config config;

        public UserSetting(Config config) {
            this.config = config;
        }
    
        public ModifyUserSettingResp modify(ModifyUserSettingReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/attendance/v1/user_settings/modify"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           ModifyUserSettingResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, ModifyUserSettingResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public ModifyUserSettingResp modify(ModifyUserSettingReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/attendance/v1/user_settings/modify"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           ModifyUserSettingResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, ModifyUserSettingResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public QueryUserSettingResp query(QueryUserSettingReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/attendance/v1/user_settings/query"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           QueryUserSettingResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, QueryUserSettingResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public QueryUserSettingResp query(QueryUserSettingReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/attendance/v1/user_settings/query"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           QueryUserSettingResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, QueryUserSettingResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    }

    public UserStatsData userStatsData() {
        return userStatsData;
    }

    public static class UserStatsData {
        private final Config config;

        public UserStatsData(Config config) {
            this.config = config;
        }
    
        public QueryUserStatsDataResp query(QueryUserStatsDataReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/attendance/v1/user_stats_datas/query"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           QueryUserStatsDataResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, QueryUserStatsDataResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public QueryUserStatsDataResp query(QueryUserStatsDataReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/attendance/v1/user_stats_datas/query"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           QueryUserStatsDataResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, QueryUserStatsDataResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    }

    public UserStatsField userStatsField() {
        return userStatsField;
    }

    public static class UserStatsField {
        private final Config config;

        public UserStatsField(Config config) {
            this.config = config;
        }
    
        public QueryUserStatsFieldResp query(QueryUserStatsFieldReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/attendance/v1/user_stats_fields/query"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           QueryUserStatsFieldResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, QueryUserStatsFieldResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public QueryUserStatsFieldResp query(QueryUserStatsFieldReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/attendance/v1/user_stats_fields/query"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           QueryUserStatsFieldResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, QueryUserStatsFieldResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    }

    public UserStatsView userStatsView() {
        return userStatsView;
    }

    public static class UserStatsView {
        private final Config config;

        public UserStatsView(Config config) {
            this.config = config;
        }
    
        public QueryUserStatsViewResp query(QueryUserStatsViewReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/attendance/v1/user_stats_views/query"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           QueryUserStatsViewResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, QueryUserStatsViewResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public QueryUserStatsViewResp query(QueryUserStatsViewReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/attendance/v1/user_stats_views/query"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           QueryUserStatsViewResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, QueryUserStatsViewResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public UpdateUserStatsViewResp update(UpdateUserStatsViewReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "PUT"
                       ,"/open-apis/attendance/v1/user_stats_views/:user_stats_view_id"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           UpdateUserStatsViewResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, UpdateUserStatsViewResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public UpdateUserStatsViewResp update(UpdateUserStatsViewReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "PUT"
                       ,"/open-apis/attendance/v1/user_stats_views/:user_stats_view_id"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           UpdateUserStatsViewResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, UpdateUserStatsViewResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    }

    public UserTask userTask() {
        return userTask;
    }

    public static class UserTask {
        private final Config config;

        public UserTask(Config config) {
            this.config = config;
        }
    
        public QueryUserTaskResp query(QueryUserTaskReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/attendance/v1/user_tasks/query"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           QueryUserTaskResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, QueryUserTaskResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public QueryUserTaskResp query(QueryUserTaskReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/attendance/v1/user_tasks/query"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           QueryUserTaskResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, QueryUserTaskResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    }

    public UserTaskRemedy userTaskRemedy() {
        return userTaskRemedy;
    }

    public static class UserTaskRemedy {
        private final Config config;

        public UserTaskRemedy(Config config) {
            this.config = config;
        }
    
        public CreateUserTaskRemedyResp create(CreateUserTaskRemedyReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/attendance/v1/user_task_remedys"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           CreateUserTaskRemedyResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, CreateUserTaskRemedyResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public CreateUserTaskRemedyResp create(CreateUserTaskRemedyReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/attendance/v1/user_task_remedys"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           CreateUserTaskRemedyResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, CreateUserTaskRemedyResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public QueryUserTaskRemedyResp query(QueryUserTaskRemedyReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/attendance/v1/user_task_remedys/query"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           QueryUserTaskRemedyResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, QueryUserTaskRemedyResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public QueryUserTaskRemedyResp query(QueryUserTaskRemedyReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/attendance/v1/user_task_remedys/query"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           QueryUserTaskRemedyResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, QueryUserTaskRemedyResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public QueryUserAllowedRemedysUserTaskRemedyResp queryUserAllowedRemedys(QueryUserAllowedRemedysUserTaskRemedyReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/attendance/v1/user_task_remedys/query_user_allowed_remedys"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           QueryUserAllowedRemedysUserTaskRemedyResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, QueryUserAllowedRemedysUserTaskRemedyResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public QueryUserAllowedRemedysUserTaskRemedyResp queryUserAllowedRemedys(QueryUserAllowedRemedysUserTaskRemedyReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/attendance/v1/user_task_remedys/query_user_allowed_remedys"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           QueryUserAllowedRemedysUserTaskRemedyResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, QueryUserAllowedRemedysUserTaskRemedyResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    }


}