// Code generated by lark suite oapi sdk gen
package com.larksuite.oapi.service.wiki.v2;

import com.larksuite.oapi.core.token.AccessTokenType;
import com.larksuite.oapi.core.Transport;
import com.larksuite.oapi.core.response.RawResponse;
import com.larksuite.oapi.core.utils.UnmarshalRespUtil;
import com.larksuite.oapi.event.IEventHandler;
import com.larksuite.oapi.core.utils.Sets;
import com.larksuite.oapi.core.Config;
import com.larksuite.oapi.core.request.RequestOptions;
import java.io.ByteArrayOutputStream;
import com.larksuite.oapi.event.model.BaseEvent;
import com.larksuite.oapi.event.model.BaseEventV2;
import com.larksuite.oapi.service.wiki.v2.model.*;
import java.util.Map;
import java.util.HashMap;
import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;

public class WikiService {
    private final Space space;
    private final SpaceMember spaceMember;
    private final SpaceNode spaceNode;
    private final SpaceSetting spaceSetting;
    private final Task task;

    public WikiService(Config config) {
        this.space = new Space(config);
        this.spaceMember = new SpaceMember(config);
        this.spaceNode = new SpaceNode(config);
        this.spaceSetting = new SpaceSetting(config);
        this.task = new Task(config);
    }
    public Space space() {
        return space;
    }

    public static class Space {
        private final Config config;

        public Space(Config config) {
            this.config = config;
        }
    
        public CreateSpaceResp create(CreateSpaceReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/wiki/v2/spaces"
                       ,Sets.newHashSet(AccessTokenType.User)
                       ,req);
	       
           // 反序列化
           CreateSpaceResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, CreateSpaceResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public CreateSpaceResp create(CreateSpaceReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/wiki/v2/spaces"
                       ,Sets.newHashSet(AccessTokenType.User)
                       ,req);
            
           // 反序列化
           CreateSpaceResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, CreateSpaceResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public GetSpaceResp get(GetSpaceReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/wiki/v2/spaces/:space_id"
                       ,Sets.newHashSet(AccessTokenType.User, AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           GetSpaceResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, GetSpaceResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public GetSpaceResp get(GetSpaceReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/wiki/v2/spaces/:space_id"
                       ,Sets.newHashSet(AccessTokenType.User, AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           GetSpaceResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, GetSpaceResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public GetNodeSpaceResp getNode(GetNodeSpaceReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/wiki/v2/spaces/get_node"
                       ,Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
                       ,req);
	       
           // 反序列化
           GetNodeSpaceResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, GetNodeSpaceResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public GetNodeSpaceResp getNode(GetNodeSpaceReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/wiki/v2/spaces/get_node"
                       ,Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
                       ,req);
            
           // 反序列化
           GetNodeSpaceResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, GetNodeSpaceResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public ListSpaceResp list(ListSpaceReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/wiki/v2/spaces"
                       ,Sets.newHashSet(AccessTokenType.User, AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           ListSpaceResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, ListSpaceResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public ListSpaceResp list(ListSpaceReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/wiki/v2/spaces"
                       ,Sets.newHashSet(AccessTokenType.User, AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           ListSpaceResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, ListSpaceResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    }

    public SpaceMember spaceMember() {
        return spaceMember;
    }

    public static class SpaceMember {
        private final Config config;

        public SpaceMember(Config config) {
            this.config = config;
        }
    
        public CreateSpaceMemberResp create(CreateSpaceMemberReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/wiki/v2/spaces/:space_id/members"
                       ,Sets.newHashSet(AccessTokenType.User, AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           CreateSpaceMemberResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, CreateSpaceMemberResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public CreateSpaceMemberResp create(CreateSpaceMemberReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/wiki/v2/spaces/:space_id/members"
                       ,Sets.newHashSet(AccessTokenType.User, AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           CreateSpaceMemberResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, CreateSpaceMemberResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public DeleteSpaceMemberResp delete(DeleteSpaceMemberReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "DELETE"
                       ,"/open-apis/wiki/v2/spaces/:space_id/members/:member_id"
                       ,Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
                       ,req);
	       
           // 反序列化
           DeleteSpaceMemberResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, DeleteSpaceMemberResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public DeleteSpaceMemberResp delete(DeleteSpaceMemberReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "DELETE"
                       ,"/open-apis/wiki/v2/spaces/:space_id/members/:member_id"
                       ,Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
                       ,req);
            
           // 反序列化
           DeleteSpaceMemberResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, DeleteSpaceMemberResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    }

    public SpaceNode spaceNode() {
        return spaceNode;
    }

    public static class SpaceNode {
        private final Config config;

        public SpaceNode(Config config) {
            this.config = config;
        }
    
        public CopySpaceNodeResp copy(CopySpaceNodeReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/wiki/v2/spaces/:space_id/nodes/:node_token/copy"
                       ,Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
                       ,req);
	       
           // 反序列化
           CopySpaceNodeResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, CopySpaceNodeResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public CopySpaceNodeResp copy(CopySpaceNodeReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/wiki/v2/spaces/:space_id/nodes/:node_token/copy"
                       ,Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
                       ,req);
            
           // 反序列化
           CopySpaceNodeResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, CopySpaceNodeResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public CreateSpaceNodeResp create(CreateSpaceNodeReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/wiki/v2/spaces/:space_id/nodes"
                       ,Sets.newHashSet(AccessTokenType.User, AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           CreateSpaceNodeResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, CreateSpaceNodeResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public CreateSpaceNodeResp create(CreateSpaceNodeReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/wiki/v2/spaces/:space_id/nodes"
                       ,Sets.newHashSet(AccessTokenType.User, AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           CreateSpaceNodeResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, CreateSpaceNodeResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public ListSpaceNodeResp list(ListSpaceNodeReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/wiki/v2/spaces/:space_id/nodes"
                       ,Sets.newHashSet(AccessTokenType.User, AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           ListSpaceNodeResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, ListSpaceNodeResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public ListSpaceNodeResp list(ListSpaceNodeReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/wiki/v2/spaces/:space_id/nodes"
                       ,Sets.newHashSet(AccessTokenType.User, AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           ListSpaceNodeResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, ListSpaceNodeResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public MoveSpaceNodeResp move(MoveSpaceNodeReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/wiki/v2/spaces/:space_id/nodes/:node_token/move"
                       ,Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
                       ,req);
	       
           // 反序列化
           MoveSpaceNodeResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, MoveSpaceNodeResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public MoveSpaceNodeResp move(MoveSpaceNodeReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/wiki/v2/spaces/:space_id/nodes/:node_token/move"
                       ,Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
                       ,req);
            
           // 反序列化
           MoveSpaceNodeResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, MoveSpaceNodeResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public MoveDocsToWikiSpaceNodeResp moveDocsToWiki(MoveDocsToWikiSpaceNodeReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/wiki/v2/spaces/:space_id/nodes/move_docs_to_wiki"
                       ,Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
                       ,req);
	       
           // 反序列化
           MoveDocsToWikiSpaceNodeResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, MoveDocsToWikiSpaceNodeResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public MoveDocsToWikiSpaceNodeResp moveDocsToWiki(MoveDocsToWikiSpaceNodeReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/wiki/v2/spaces/:space_id/nodes/move_docs_to_wiki"
                       ,Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
                       ,req);
            
           // 反序列化
           MoveDocsToWikiSpaceNodeResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, MoveDocsToWikiSpaceNodeResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public UpdateTitleSpaceNodeResp updateTitle(UpdateTitleSpaceNodeReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/wiki/v2/spaces/:space_id/nodes/:node_token/update_title"
                       ,Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
                       ,req);
	       
           // 反序列化
           UpdateTitleSpaceNodeResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, UpdateTitleSpaceNodeResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public UpdateTitleSpaceNodeResp updateTitle(UpdateTitleSpaceNodeReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/wiki/v2/spaces/:space_id/nodes/:node_token/update_title"
                       ,Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
                       ,req);
            
           // 反序列化
           UpdateTitleSpaceNodeResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, UpdateTitleSpaceNodeResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    }

    public SpaceSetting spaceSetting() {
        return spaceSetting;
    }

    public static class SpaceSetting {
        private final Config config;

        public SpaceSetting(Config config) {
            this.config = config;
        }
    
        public UpdateSpaceSettingResp update(UpdateSpaceSettingReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "PUT"
                       ,"/open-apis/wiki/v2/spaces/:space_id/setting"
                       ,Sets.newHashSet(AccessTokenType.User, AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           UpdateSpaceSettingResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, UpdateSpaceSettingResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public UpdateSpaceSettingResp update(UpdateSpaceSettingReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "PUT"
                       ,"/open-apis/wiki/v2/spaces/:space_id/setting"
                       ,Sets.newHashSet(AccessTokenType.User, AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           UpdateSpaceSettingResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, UpdateSpaceSettingResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    }

    public Task task() {
        return task;
    }

    public static class Task {
        private final Config config;

        public Task(Config config) {
            this.config = config;
        }
    
        public GetTaskResp get(GetTaskReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/wiki/v2/tasks/:task_id"
                       ,Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
                       ,req);
	       
           // 反序列化
           GetTaskResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, GetTaskResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public GetTaskResp get(GetTaskReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/wiki/v2/tasks/:task_id"
                       ,Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
                       ,req);
            
           // 反序列化
           GetTaskResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, GetTaskResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    }


}