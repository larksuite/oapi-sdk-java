// Code generated by lark suite oapi sdk gen
package com.larksuite.oapi.service.event.v1;

import com.larksuite.oapi.core.Config;
import com.larksuite.oapi.core.Transport;
import com.larksuite.oapi.core.request.RequestOptions;
import com.larksuite.oapi.core.response.RawResponse;
import com.larksuite.oapi.core.token.AccessTokenType;
import com.larksuite.oapi.core.utils.Sets;
import com.larksuite.oapi.core.utils.UnmarshalRespUtil;
import com.larksuite.oapi.service.event.v1.model.ListOutboundIpReq;
import com.larksuite.oapi.service.event.v1.model.ListOutboundIpResp;

public class EventService {
    private final OutboundIp outboundIp;

    public EventService(Config config) {
        this.outboundIp = new OutboundIp(config);
    }

    public OutboundIp outboundIp() {
        return outboundIp;
    }

    public static class OutboundIp {
        private final Config config;

        public OutboundIp(Config config) {
            this.config = config;
        }

        public ListOutboundIpResp list(ListOutboundIpReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
                    , "/open-apis/event/v1/outbound_ip"
                    , Sets.newHashSet(AccessTokenType.Tenant)
                    , req);

            // 反序列化
            ListOutboundIpResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, ListOutboundIpResp.class);
            resp.setRawResponse(httpResponse);
            return resp;
        }

        public ListOutboundIpResp list(ListOutboundIpReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
                    , "/open-apis/event/v1/outbound_ip"
                    , Sets.newHashSet(AccessTokenType.Tenant)
                    , req);

            // 反序列化
            ListOutboundIpResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, ListOutboundIpResp.class);
            resp.setRawResponse(httpResponse);
            return resp;
        }
    }


}