// Code generated by lark suite oapi sdk gen
package com.larksuite.oapi.service.task.v1.model;
import com.larksuite.oapi.service.task.v1.enums.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.annotations.SerializedName;
import com.larksuite.oapi.core.annotation.Body;
import com.larksuite.oapi.core.annotation.Path;
import com.larksuite.oapi.core.annotation.Query;
import java.io.File;
import java.io.ByteArrayOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import com.larksuite.oapi.core.utils.Strings;
import com.larksuite.oapi.core.response.BaseResponse;
public class Due {
    @SerializedName("time")
    private Long time;
    @SerializedName("timezone")
    private String timezone;
    @SerializedName("is_all_day")
    private Boolean isAllDay;
    public Long getTime() {
        return this.time;
    }

    public void setTime(Long time) {
        this.time = time;
    }

    public String getTimezone() {
        return this.timezone;
    }

    public void setTimezone(String timezone) {
        this.timezone = timezone;
    }

    public Boolean getIsAllDay() {
        return this.isAllDay;
    }

    public void setIsAllDay(Boolean isAllDay) {
        this.isAllDay = isAllDay;
    }


// builder 开始
  public Due(){}

  public Due(Builder builder){
      this.time = builder.time;
      this.timezone = builder.timezone;
      this.isAllDay = builder.isAllDay;
  }

    public static class Builder {
        private Long time;
        private String timezone;
        private Boolean isAllDay;
        public Builder time(Long time) {
             this.time = time;
             return this;
        }
    
        public Builder timezone(String timezone) {
             this.timezone = timezone;
             return this;
        }
    
        public Builder isAllDay(Boolean isAllDay) {
             this.isAllDay = isAllDay;
             return this;
        }
    
    
    public Due build(){
        return new Due(this);
      }
    }

    public static Builder newBuilder() {
        return new Builder();
    }
}
