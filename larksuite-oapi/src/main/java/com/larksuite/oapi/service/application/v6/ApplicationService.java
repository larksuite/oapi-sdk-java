// Code generated by lark suite oapi sdk gen
package com.larksuite.oapi.service.application.v6;

import com.larksuite.oapi.core.Config;
import com.larksuite.oapi.core.Transport;
import com.larksuite.oapi.core.request.RequestOptions;
import com.larksuite.oapi.core.response.RawResponse;
import com.larksuite.oapi.core.token.AccessTokenType;
import com.larksuite.oapi.core.utils.Sets;
import com.larksuite.oapi.core.utils.UnmarshalRespUtil;
import com.larksuite.oapi.event.IEventHandler;
import com.larksuite.oapi.service.application.v6.model.*;

public class ApplicationService {
    private final Application application;
    private final ApplicationAppUsage applicationAppUsage;
    private final ApplicationAppVersion applicationAppVersion;
    private final ApplicationFeedback applicationFeedback;
    private final ApplicationVisibility applicationVisibility;

    public ApplicationService(Config config) {
        this.application = new Application(config);
        this.applicationAppUsage = new ApplicationAppUsage(config);
        this.applicationAppVersion = new ApplicationAppVersion(config);
        this.applicationFeedback = new ApplicationFeedback(config);
        this.applicationVisibility = new ApplicationVisibility(config);
    }

    public Application application() {
        return application;
    }

    public ApplicationAppUsage applicationAppUsage() {
        return applicationAppUsage;
    }

    public ApplicationAppVersion applicationAppVersion() {
        return applicationAppVersion;
    }

    public ApplicationFeedback applicationFeedback() {
        return applicationFeedback;
    }

    public ApplicationVisibility applicationVisibility() {
        return applicationVisibility;
    }

    public static class Application {
        private final Config config;

        public Application(Config config) {
            this.config = config;
        }

        public GetApplicationResp get(GetApplicationReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
                    , "/open-apis/application/v6/applications/:app_id"
                    , Sets.newHashSet(AccessTokenType.Tenant)
                    , req);

            // 反序列化
            GetApplicationResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, GetApplicationResp.class);
            resp.setRawResponse(httpResponse);
            return resp;
        }

        public GetApplicationResp get(GetApplicationReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
                    , "/open-apis/application/v6/applications/:app_id"
                    , Sets.newHashSet(AccessTokenType.Tenant)
                    , req);

            // 反序列化
            GetApplicationResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, GetApplicationResp.class);
            resp.setRawResponse(httpResponse);
            return resp;
        }

        public PatchApplicationResp patch(PatchApplicationReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config, reqOptions, "PATCH"
                    , "/open-apis/application/v6/applications/:app_id"
                    , Sets.newHashSet(AccessTokenType.Tenant)
                    , req);

            // 反序列化
            PatchApplicationResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, PatchApplicationResp.class);
            resp.setRawResponse(httpResponse);
            return resp;
        }

        public PatchApplicationResp patch(PatchApplicationReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config, reqOptions, "PATCH"
                    , "/open-apis/application/v6/applications/:app_id"
                    , Sets.newHashSet(AccessTokenType.Tenant)
                    , req);

            // 反序列化
            PatchApplicationResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, PatchApplicationResp.class);
            resp.setRawResponse(httpResponse);
            return resp;
        }

        public UnderauditlistApplicationResp underauditlist(UnderauditlistApplicationReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
                    , "/open-apis/application/v6/applications/underauditlist"
                    , Sets.newHashSet(AccessTokenType.Tenant)
                    , req);

            // 反序列化
            UnderauditlistApplicationResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, UnderauditlistApplicationResp.class);
            resp.setRawResponse(httpResponse);
            return resp;
        }

        public UnderauditlistApplicationResp underauditlist(UnderauditlistApplicationReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
                    , "/open-apis/application/v6/applications/underauditlist"
                    , Sets.newHashSet(AccessTokenType.Tenant)
                    , req);

            // 反序列化
            UnderauditlistApplicationResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, UnderauditlistApplicationResp.class);
            resp.setRawResponse(httpResponse);
            return resp;
        }
    }

    public static class ApplicationAppUsage {
        private final Config config;

        public ApplicationAppUsage(Config config) {
            this.config = config;
        }

        public OverviewApplicationAppUsageResp overview(OverviewApplicationAppUsageReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config, reqOptions, "POST"
                    , "/open-apis/application/v6/applications/:app_id/app_usage/overview"
                    , Sets.newHashSet(AccessTokenType.Tenant)
                    , req);

            // 反序列化
            OverviewApplicationAppUsageResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, OverviewApplicationAppUsageResp.class);
            resp.setRawResponse(httpResponse);
            return resp;
        }

        public OverviewApplicationAppUsageResp overview(OverviewApplicationAppUsageReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config, reqOptions, "POST"
                    , "/open-apis/application/v6/applications/:app_id/app_usage/overview"
                    , Sets.newHashSet(AccessTokenType.Tenant)
                    , req);

            // 反序列化
            OverviewApplicationAppUsageResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, OverviewApplicationAppUsageResp.class);
            resp.setRawResponse(httpResponse);
            return resp;
        }
    }

    public static class ApplicationAppVersion {
        private final Config config;

        public ApplicationAppVersion(Config config) {
            this.config = config;
        }

        public GetApplicationAppVersionResp get(GetApplicationAppVersionReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
                    , "/open-apis/application/v6/applications/:app_id/app_versions/:version_id"
                    , Sets.newHashSet(AccessTokenType.Tenant)
                    , req);

            // 反序列化
            GetApplicationAppVersionResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, GetApplicationAppVersionResp.class);
            resp.setRawResponse(httpResponse);
            return resp;
        }

        public GetApplicationAppVersionResp get(GetApplicationAppVersionReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
                    , "/open-apis/application/v6/applications/:app_id/app_versions/:version_id"
                    , Sets.newHashSet(AccessTokenType.Tenant)
                    , req);

            // 反序列化
            GetApplicationAppVersionResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, GetApplicationAppVersionResp.class);
            resp.setRawResponse(httpResponse);
            return resp;
        }

        public PatchApplicationAppVersionResp patch(PatchApplicationAppVersionReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config, reqOptions, "PATCH"
                    , "/open-apis/application/v6/applications/:app_id/app_versions/:version_id"
                    , Sets.newHashSet(AccessTokenType.Tenant)
                    , req);

            // 反序列化
            PatchApplicationAppVersionResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, PatchApplicationAppVersionResp.class);
            resp.setRawResponse(httpResponse);
            return resp;
        }

        public PatchApplicationAppVersionResp patch(PatchApplicationAppVersionReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config, reqOptions, "PATCH"
                    , "/open-apis/application/v6/applications/:app_id/app_versions/:version_id"
                    , Sets.newHashSet(AccessTokenType.Tenant)
                    , req);

            // 反序列化
            PatchApplicationAppVersionResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, PatchApplicationAppVersionResp.class);
            resp.setRawResponse(httpResponse);
            return resp;
        }
    }

    public static class ApplicationFeedback {
        private final Config config;

        public ApplicationFeedback(Config config) {
            this.config = config;
        }

        public ListApplicationFeedbackResp list(ListApplicationFeedbackReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
                    , "/open-apis/application/v6/applications/:app_id/feedbacks"
                    , Sets.newHashSet(AccessTokenType.Tenant)
                    , req);

            // 反序列化
            ListApplicationFeedbackResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, ListApplicationFeedbackResp.class);
            resp.setRawResponse(httpResponse);
            return resp;
        }

        public ListApplicationFeedbackResp list(ListApplicationFeedbackReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
                    , "/open-apis/application/v6/applications/:app_id/feedbacks"
                    , Sets.newHashSet(AccessTokenType.Tenant)
                    , req);

            // 反序列化
            ListApplicationFeedbackResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, ListApplicationFeedbackResp.class);
            resp.setRawResponse(httpResponse);
            return resp;
        }

        public PatchApplicationFeedbackResp patch(PatchApplicationFeedbackReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config, reqOptions, "PATCH"
                    , "/open-apis/application/v6/applications/:app_id/feedbacks/:feedback_id"
                    , Sets.newHashSet(AccessTokenType.Tenant)
                    , req);

            // 反序列化
            PatchApplicationFeedbackResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, PatchApplicationFeedbackResp.class);
            resp.setRawResponse(httpResponse);
            return resp;
        }

        public PatchApplicationFeedbackResp patch(PatchApplicationFeedbackReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config, reqOptions, "PATCH"
                    , "/open-apis/application/v6/applications/:app_id/feedbacks/:feedback_id"
                    , Sets.newHashSet(AccessTokenType.Tenant)
                    , req);

            // 反序列化
            PatchApplicationFeedbackResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, PatchApplicationFeedbackResp.class);
            resp.setRawResponse(httpResponse);
            return resp;
        }
    }

    public static class ApplicationVisibility {
        private final Config config;

        public ApplicationVisibility(Config config) {
            this.config = config;
        }
    }

    public abstract static class ApplicationCreatedEventHandler implements IEventHandler<ApplicationCreatedEvent> {
        @Override
        public ApplicationCreatedEvent getEvent() {
            return new ApplicationCreatedEvent();
        }
    }

    public abstract static class ApplicationAppVersionAuditEventHandler implements IEventHandler<ApplicationAppVersionAuditEvent> {
        @Override
        public ApplicationAppVersionAuditEvent getEvent() {
            return new ApplicationAppVersionAuditEvent();
        }
    }

    public abstract static class ApplicationAppVersionPublishApplyEventHandler implements IEventHandler<ApplicationAppVersionPublishApplyEvent> {
        @Override
        public ApplicationAppVersionPublishApplyEvent getEvent() {
            return new ApplicationAppVersionPublishApplyEvent();
        }
    }

    public abstract static class ApplicationAppVersionPublishRevokeEventHandler implements IEventHandler<ApplicationAppVersionPublishRevokeEvent> {
        @Override
        public ApplicationAppVersionPublishRevokeEvent getEvent() {
            return new ApplicationAppVersionPublishRevokeEvent();
        }
    }

    public abstract static class ApplicationFeedbackCreatedEventHandler implements IEventHandler<ApplicationFeedbackCreatedEvent> {
        @Override
        public ApplicationFeedbackCreatedEvent getEvent() {
            return new ApplicationFeedbackCreatedEvent();
        }
    }

    public abstract static class ApplicationFeedbackUpdatedEventHandler implements IEventHandler<ApplicationFeedbackUpdatedEvent> {
        @Override
        public ApplicationFeedbackUpdatedEvent getEvent() {
            return new ApplicationFeedbackUpdatedEvent();
        }
    }

    public abstract static class ApplicationVisibilityAddedEventHandler implements IEventHandler<ApplicationVisibilityAddedEvent> {
        @Override
        public ApplicationVisibilityAddedEvent getEvent() {
            return new ApplicationVisibilityAddedEvent();
        }
    }
}