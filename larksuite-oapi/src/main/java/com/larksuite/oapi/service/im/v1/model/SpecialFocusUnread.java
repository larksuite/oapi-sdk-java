// Code generated by lark suite oapi sdk gen
package com.larksuite.oapi.service.im.v1.model;
import com.larksuite.oapi.service.im.v1.enums.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.annotations.SerializedName;
import com.larksuite.oapi.core.annotation.Body;
import com.larksuite.oapi.core.annotation.Path;
import com.larksuite.oapi.core.annotation.Query;
import java.io.File;
import java.io.ByteArrayOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import com.larksuite.oapi.core.utils.Strings;
import com.larksuite.oapi.core.response.BaseResponse;
public class SpecialFocusUnread {
    @SerializedName("id")
    private String id;
    @SerializedName("id_type")
    private String idType;
    @SerializedName("unread_count")
    private String unreadCount;
    public String getId() {
        return this.id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getIdType() {
        return this.idType;
    }

    public void setIdType(String idType) {
        this.idType = idType;
    }

    public String getUnreadCount() {
        return this.unreadCount;
    }

    public void setUnreadCount(String unreadCount) {
        this.unreadCount = unreadCount;
    }


// builder 开始
  public SpecialFocusUnread(){}

  public SpecialFocusUnread(Builder builder){
      this.id = builder.id;
      this.idType = builder.idType;
      this.unreadCount = builder.unreadCount;
  }

    public static class Builder {
        private String id;
        private String idType;
        private String unreadCount;
        public Builder id(String id) {
             this.id = id;
             return this;
        }
    
        public Builder idType(String idType) {
             this.idType = idType;
             return this;
        }
        public Builder idType(com.larksuite.oapi.service.im.v1.enums.IdTypeEnum idType) {
             this.idType = idType.getValue();
             return this;
        }
    
        public Builder unreadCount(String unreadCount) {
             this.unreadCount = unreadCount;
             return this;
        }
    
    
    public SpecialFocusUnread build(){
        return new SpecialFocusUnread(this);
      }
    }

    public static Builder newBuilder() {
        return new Builder();
    }
}
