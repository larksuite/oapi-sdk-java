// Code generated by lark suite oapi sdk gen
package com.larksuite.oapi.service.mail.v1;

import com.larksuite.oapi.core.token.AccessTokenType;
import com.larksuite.oapi.core.Transport;
import com.larksuite.oapi.core.response.RawResponse;
import com.larksuite.oapi.core.utils.UnmarshalRespUtil;
import com.larksuite.oapi.event.IEventHandler;
import com.larksuite.oapi.core.utils.Sets;
import com.larksuite.oapi.core.Config;
import com.larksuite.oapi.core.request.RequestOptions;
import java.io.ByteArrayOutputStream;
import com.larksuite.oapi.event.model.BaseEvent;
import com.larksuite.oapi.event.model.BaseEventV2;
import com.larksuite.oapi.service.mail.v1.model.*;
import java.util.Map;
import java.util.HashMap;
import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;

public class MailService {
    private final Mailgroup mailgroup;
    private final MailgroupAlias mailgroupAlias;
    private final MailgroupMember mailgroupMember;
    private final MailgroupPermissionMember mailgroupPermissionMember;
    private final PublicMailbox publicMailbox;
    private final PublicMailboxAlias publicMailboxAlias;
    private final PublicMailboxMember publicMailboxMember;
    private final User user;
    private final UserMailbox userMailbox;
    private final UserMailboxAlias userMailboxAlias;

    public MailService(Config config) {
        this.mailgroup = new Mailgroup(config);
        this.mailgroupAlias = new MailgroupAlias(config);
        this.mailgroupMember = new MailgroupMember(config);
        this.mailgroupPermissionMember = new MailgroupPermissionMember(config);
        this.publicMailbox = new PublicMailbox(config);
        this.publicMailboxAlias = new PublicMailboxAlias(config);
        this.publicMailboxMember = new PublicMailboxMember(config);
        this.user = new User(config);
        this.userMailbox = new UserMailbox(config);
        this.userMailboxAlias = new UserMailboxAlias(config);
    }
    public Mailgroup mailgroup() {
        return mailgroup;
    }

    public static class Mailgroup {
        private final Config config;

        public Mailgroup(Config config) {
            this.config = config;
        }
    
        public CreateMailgroupResp create(CreateMailgroupReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/mail/v1/mailgroups"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           CreateMailgroupResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, CreateMailgroupResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public CreateMailgroupResp create(CreateMailgroupReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/mail/v1/mailgroups"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           CreateMailgroupResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, CreateMailgroupResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public DeleteMailgroupResp delete(DeleteMailgroupReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "DELETE"
                       ,"/open-apis/mail/v1/mailgroups/:mailgroup_id"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           DeleteMailgroupResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, DeleteMailgroupResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public DeleteMailgroupResp delete(DeleteMailgroupReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "DELETE"
                       ,"/open-apis/mail/v1/mailgroups/:mailgroup_id"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           DeleteMailgroupResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, DeleteMailgroupResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public GetMailgroupResp get(GetMailgroupReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/mail/v1/mailgroups/:mailgroup_id"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           GetMailgroupResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, GetMailgroupResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public GetMailgroupResp get(GetMailgroupReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/mail/v1/mailgroups/:mailgroup_id"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           GetMailgroupResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, GetMailgroupResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public ListMailgroupResp list(ListMailgroupReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/mail/v1/mailgroups"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           ListMailgroupResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, ListMailgroupResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public ListMailgroupResp list(ListMailgroupReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/mail/v1/mailgroups"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           ListMailgroupResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, ListMailgroupResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public PatchMailgroupResp patch(PatchMailgroupReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "PATCH"
                       ,"/open-apis/mail/v1/mailgroups/:mailgroup_id"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           PatchMailgroupResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, PatchMailgroupResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public PatchMailgroupResp patch(PatchMailgroupReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "PATCH"
                       ,"/open-apis/mail/v1/mailgroups/:mailgroup_id"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           PatchMailgroupResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, PatchMailgroupResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public UpdateMailgroupResp update(UpdateMailgroupReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "PUT"
                       ,"/open-apis/mail/v1/mailgroups/:mailgroup_id"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           UpdateMailgroupResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, UpdateMailgroupResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public UpdateMailgroupResp update(UpdateMailgroupReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "PUT"
                       ,"/open-apis/mail/v1/mailgroups/:mailgroup_id"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           UpdateMailgroupResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, UpdateMailgroupResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    }

    public MailgroupAlias mailgroupAlias() {
        return mailgroupAlias;
    }

    public static class MailgroupAlias {
        private final Config config;

        public MailgroupAlias(Config config) {
            this.config = config;
        }
    
        public CreateMailgroupAliasResp create(CreateMailgroupAliasReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/mail/v1/mailgroups/:mailgroup_id/aliases"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           CreateMailgroupAliasResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, CreateMailgroupAliasResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public CreateMailgroupAliasResp create(CreateMailgroupAliasReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/mail/v1/mailgroups/:mailgroup_id/aliases"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           CreateMailgroupAliasResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, CreateMailgroupAliasResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public DeleteMailgroupAliasResp delete(DeleteMailgroupAliasReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "DELETE"
                       ,"/open-apis/mail/v1/mailgroups/:mailgroup_id/aliases/:alias_id"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           DeleteMailgroupAliasResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, DeleteMailgroupAliasResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public DeleteMailgroupAliasResp delete(DeleteMailgroupAliasReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "DELETE"
                       ,"/open-apis/mail/v1/mailgroups/:mailgroup_id/aliases/:alias_id"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           DeleteMailgroupAliasResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, DeleteMailgroupAliasResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public ListMailgroupAliasResp list(ListMailgroupAliasReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/mail/v1/mailgroups/:mailgroup_id/aliases"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           ListMailgroupAliasResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, ListMailgroupAliasResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public ListMailgroupAliasResp list(ListMailgroupAliasReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/mail/v1/mailgroups/:mailgroup_id/aliases"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           ListMailgroupAliasResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, ListMailgroupAliasResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    }

    public MailgroupMember mailgroupMember() {
        return mailgroupMember;
    }

    public static class MailgroupMember {
        private final Config config;

        public MailgroupMember(Config config) {
            this.config = config;
        }
    
        public CreateMailgroupMemberResp create(CreateMailgroupMemberReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/mail/v1/mailgroups/:mailgroup_id/members"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           CreateMailgroupMemberResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, CreateMailgroupMemberResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public CreateMailgroupMemberResp create(CreateMailgroupMemberReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/mail/v1/mailgroups/:mailgroup_id/members"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           CreateMailgroupMemberResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, CreateMailgroupMemberResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public DeleteMailgroupMemberResp delete(DeleteMailgroupMemberReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "DELETE"
                       ,"/open-apis/mail/v1/mailgroups/:mailgroup_id/members/:member_id"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           DeleteMailgroupMemberResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, DeleteMailgroupMemberResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public DeleteMailgroupMemberResp delete(DeleteMailgroupMemberReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "DELETE"
                       ,"/open-apis/mail/v1/mailgroups/:mailgroup_id/members/:member_id"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           DeleteMailgroupMemberResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, DeleteMailgroupMemberResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public GetMailgroupMemberResp get(GetMailgroupMemberReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/mail/v1/mailgroups/:mailgroup_id/members/:member_id"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           GetMailgroupMemberResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, GetMailgroupMemberResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public GetMailgroupMemberResp get(GetMailgroupMemberReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/mail/v1/mailgroups/:mailgroup_id/members/:member_id"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           GetMailgroupMemberResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, GetMailgroupMemberResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public ListMailgroupMemberResp list(ListMailgroupMemberReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/mail/v1/mailgroups/:mailgroup_id/members"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           ListMailgroupMemberResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, ListMailgroupMemberResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public ListMailgroupMemberResp list(ListMailgroupMemberReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/mail/v1/mailgroups/:mailgroup_id/members"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           ListMailgroupMemberResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, ListMailgroupMemberResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    }

    public MailgroupPermissionMember mailgroupPermissionMember() {
        return mailgroupPermissionMember;
    }

    public static class MailgroupPermissionMember {
        private final Config config;

        public MailgroupPermissionMember(Config config) {
            this.config = config;
        }
    
        public CreateMailgroupPermissionMemberResp create(CreateMailgroupPermissionMemberReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/mail/v1/mailgroups/:mailgroup_id/permission_members"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           CreateMailgroupPermissionMemberResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, CreateMailgroupPermissionMemberResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public CreateMailgroupPermissionMemberResp create(CreateMailgroupPermissionMemberReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/mail/v1/mailgroups/:mailgroup_id/permission_members"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           CreateMailgroupPermissionMemberResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, CreateMailgroupPermissionMemberResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public DeleteMailgroupPermissionMemberResp delete(DeleteMailgroupPermissionMemberReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "DELETE"
                       ,"/open-apis/mail/v1/mailgroups/:mailgroup_id/permission_members/:permission_member_id"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           DeleteMailgroupPermissionMemberResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, DeleteMailgroupPermissionMemberResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public DeleteMailgroupPermissionMemberResp delete(DeleteMailgroupPermissionMemberReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "DELETE"
                       ,"/open-apis/mail/v1/mailgroups/:mailgroup_id/permission_members/:permission_member_id"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           DeleteMailgroupPermissionMemberResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, DeleteMailgroupPermissionMemberResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public GetMailgroupPermissionMemberResp get(GetMailgroupPermissionMemberReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/mail/v1/mailgroups/:mailgroup_id/permission_members/:permission_member_id"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           GetMailgroupPermissionMemberResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, GetMailgroupPermissionMemberResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public GetMailgroupPermissionMemberResp get(GetMailgroupPermissionMemberReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/mail/v1/mailgroups/:mailgroup_id/permission_members/:permission_member_id"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           GetMailgroupPermissionMemberResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, GetMailgroupPermissionMemberResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public ListMailgroupPermissionMemberResp list(ListMailgroupPermissionMemberReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/mail/v1/mailgroups/:mailgroup_id/permission_members"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           ListMailgroupPermissionMemberResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, ListMailgroupPermissionMemberResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public ListMailgroupPermissionMemberResp list(ListMailgroupPermissionMemberReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/mail/v1/mailgroups/:mailgroup_id/permission_members"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           ListMailgroupPermissionMemberResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, ListMailgroupPermissionMemberResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    }

    public PublicMailbox publicMailbox() {
        return publicMailbox;
    }

    public static class PublicMailbox {
        private final Config config;

        public PublicMailbox(Config config) {
            this.config = config;
        }
    
        public CreatePublicMailboxResp create(CreatePublicMailboxReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/mail/v1/public_mailboxes"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           CreatePublicMailboxResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, CreatePublicMailboxResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public CreatePublicMailboxResp create(CreatePublicMailboxReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/mail/v1/public_mailboxes"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           CreatePublicMailboxResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, CreatePublicMailboxResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public DeletePublicMailboxResp delete(DeletePublicMailboxReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "DELETE"
                       ,"/open-apis/mail/v1/public_mailboxes/:public_mailbox_id"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           DeletePublicMailboxResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, DeletePublicMailboxResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public DeletePublicMailboxResp delete(DeletePublicMailboxReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "DELETE"
                       ,"/open-apis/mail/v1/public_mailboxes/:public_mailbox_id"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           DeletePublicMailboxResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, DeletePublicMailboxResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public GetPublicMailboxResp get(GetPublicMailboxReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/mail/v1/public_mailboxes/:public_mailbox_id"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           GetPublicMailboxResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, GetPublicMailboxResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public GetPublicMailboxResp get(GetPublicMailboxReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/mail/v1/public_mailboxes/:public_mailbox_id"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           GetPublicMailboxResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, GetPublicMailboxResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public ListPublicMailboxResp list(ListPublicMailboxReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/mail/v1/public_mailboxes"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           ListPublicMailboxResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, ListPublicMailboxResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public ListPublicMailboxResp list(ListPublicMailboxReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/mail/v1/public_mailboxes"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           ListPublicMailboxResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, ListPublicMailboxResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public PatchPublicMailboxResp patch(PatchPublicMailboxReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "PATCH"
                       ,"/open-apis/mail/v1/public_mailboxes/:public_mailbox_id"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           PatchPublicMailboxResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, PatchPublicMailboxResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public PatchPublicMailboxResp patch(PatchPublicMailboxReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "PATCH"
                       ,"/open-apis/mail/v1/public_mailboxes/:public_mailbox_id"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           PatchPublicMailboxResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, PatchPublicMailboxResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public UpdatePublicMailboxResp update(UpdatePublicMailboxReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "PUT"
                       ,"/open-apis/mail/v1/public_mailboxes/:public_mailbox_id"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           UpdatePublicMailboxResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, UpdatePublicMailboxResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public UpdatePublicMailboxResp update(UpdatePublicMailboxReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "PUT"
                       ,"/open-apis/mail/v1/public_mailboxes/:public_mailbox_id"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           UpdatePublicMailboxResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, UpdatePublicMailboxResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    }

    public PublicMailboxAlias publicMailboxAlias() {
        return publicMailboxAlias;
    }

    public static class PublicMailboxAlias {
        private final Config config;

        public PublicMailboxAlias(Config config) {
            this.config = config;
        }
    
        public CreatePublicMailboxAliasResp create(CreatePublicMailboxAliasReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/aliases"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           CreatePublicMailboxAliasResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, CreatePublicMailboxAliasResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public CreatePublicMailboxAliasResp create(CreatePublicMailboxAliasReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/aliases"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           CreatePublicMailboxAliasResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, CreatePublicMailboxAliasResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public DeletePublicMailboxAliasResp delete(DeletePublicMailboxAliasReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "DELETE"
                       ,"/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/aliases/:alias_id"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           DeletePublicMailboxAliasResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, DeletePublicMailboxAliasResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public DeletePublicMailboxAliasResp delete(DeletePublicMailboxAliasReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "DELETE"
                       ,"/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/aliases/:alias_id"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           DeletePublicMailboxAliasResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, DeletePublicMailboxAliasResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public ListPublicMailboxAliasResp list(ListPublicMailboxAliasReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/aliases"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           ListPublicMailboxAliasResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, ListPublicMailboxAliasResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public ListPublicMailboxAliasResp list(ListPublicMailboxAliasReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/aliases"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           ListPublicMailboxAliasResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, ListPublicMailboxAliasResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    }

    public PublicMailboxMember publicMailboxMember() {
        return publicMailboxMember;
    }

    public static class PublicMailboxMember {
        private final Config config;

        public PublicMailboxMember(Config config) {
            this.config = config;
        }
    
        public ClearPublicMailboxMemberResp clear(ClearPublicMailboxMemberReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/members/clear"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           ClearPublicMailboxMemberResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, ClearPublicMailboxMemberResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public ClearPublicMailboxMemberResp clear(ClearPublicMailboxMemberReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/members/clear"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           ClearPublicMailboxMemberResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, ClearPublicMailboxMemberResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public CreatePublicMailboxMemberResp create(CreatePublicMailboxMemberReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/members"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           CreatePublicMailboxMemberResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, CreatePublicMailboxMemberResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public CreatePublicMailboxMemberResp create(CreatePublicMailboxMemberReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/members"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           CreatePublicMailboxMemberResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, CreatePublicMailboxMemberResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public DeletePublicMailboxMemberResp delete(DeletePublicMailboxMemberReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "DELETE"
                       ,"/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/members/:member_id"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           DeletePublicMailboxMemberResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, DeletePublicMailboxMemberResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public DeletePublicMailboxMemberResp delete(DeletePublicMailboxMemberReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "DELETE"
                       ,"/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/members/:member_id"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           DeletePublicMailboxMemberResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, DeletePublicMailboxMemberResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public GetPublicMailboxMemberResp get(GetPublicMailboxMemberReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/members/:member_id"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           GetPublicMailboxMemberResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, GetPublicMailboxMemberResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public GetPublicMailboxMemberResp get(GetPublicMailboxMemberReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/members/:member_id"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           GetPublicMailboxMemberResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, GetPublicMailboxMemberResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public ListPublicMailboxMemberResp list(ListPublicMailboxMemberReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/members"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           ListPublicMailboxMemberResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, ListPublicMailboxMemberResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public ListPublicMailboxMemberResp list(ListPublicMailboxMemberReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/members"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           ListPublicMailboxMemberResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, ListPublicMailboxMemberResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    }

    public User user() {
        return user;
    }

    public static class User {
        private final Config config;

        public User(Config config) {
            this.config = config;
        }
    
        public QueryUserResp query(QueryUserReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/mail/v1/users/query"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           QueryUserResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, QueryUserResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public QueryUserResp query(QueryUserReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/mail/v1/users/query"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           QueryUserResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, QueryUserResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    }

    public UserMailbox userMailbox() {
        return userMailbox;
    }

    public static class UserMailbox {
        private final Config config;

        public UserMailbox(Config config) {
            this.config = config;
        }
    
        public DeleteUserMailboxResp delete(DeleteUserMailboxReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "DELETE"
                       ,"/open-apis/mail/v1/user_mailboxes/:user_mailbox_id"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           DeleteUserMailboxResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, DeleteUserMailboxResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public DeleteUserMailboxResp delete(DeleteUserMailboxReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "DELETE"
                       ,"/open-apis/mail/v1/user_mailboxes/:user_mailbox_id"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           DeleteUserMailboxResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, DeleteUserMailboxResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    }

    public UserMailboxAlias userMailboxAlias() {
        return userMailboxAlias;
    }

    public static class UserMailboxAlias {
        private final Config config;

        public UserMailboxAlias(Config config) {
            this.config = config;
        }
    
        public CreateUserMailboxAliasResp create(CreateUserMailboxAliasReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/mail/v1/user_mailboxes/:user_mailbox_id/aliases"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           CreateUserMailboxAliasResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, CreateUserMailboxAliasResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public CreateUserMailboxAliasResp create(CreateUserMailboxAliasReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "POST"
                       ,"/open-apis/mail/v1/user_mailboxes/:user_mailbox_id/aliases"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           CreateUserMailboxAliasResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, CreateUserMailboxAliasResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public DeleteUserMailboxAliasResp delete(DeleteUserMailboxAliasReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "DELETE"
                       ,"/open-apis/mail/v1/user_mailboxes/:user_mailbox_id/aliases/:alias_id"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           DeleteUserMailboxAliasResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, DeleteUserMailboxAliasResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public DeleteUserMailboxAliasResp delete(DeleteUserMailboxAliasReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "DELETE"
                       ,"/open-apis/mail/v1/user_mailboxes/:user_mailbox_id/aliases/:alias_id"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           DeleteUserMailboxAliasResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, DeleteUserMailboxAliasResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    
        public ListUserMailboxAliasResp list(ListUserMailboxAliasReq req, RequestOptions reqOptions) throws Exception {
            // 请求参数选项
            if (reqOptions == null) {
                reqOptions = new RequestOptions();
            }

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/mail/v1/user_mailboxes/:user_mailbox_id/aliases"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
	       
           // 反序列化
           ListUserMailboxAliasResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, ListUserMailboxAliasResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }

        public ListUserMailboxAliasResp list(ListUserMailboxAliasReq req) throws Exception {
            // 请求参数选项
            RequestOptions reqOptions = new RequestOptions();

            // 发起请求
            RawResponse httpResponse = Transport.send(config,reqOptions, "GET"
                       ,"/open-apis/mail/v1/user_mailboxes/:user_mailbox_id/aliases"
                       ,Sets.newHashSet(AccessTokenType.Tenant)
                       ,req);
            
           // 反序列化
           ListUserMailboxAliasResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, ListUserMailboxAliasResp.class);
           resp.setRawResponse(httpResponse);
           return resp;
        }
    }


}