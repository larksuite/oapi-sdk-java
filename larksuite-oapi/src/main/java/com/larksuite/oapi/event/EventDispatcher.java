// Code generated by lark suite oapi sdk gen
package com.larksuite.oapi.event;

import com.larksuite.oapi.core.Constants;
import com.larksuite.oapi.core.IHandler;
import com.larksuite.oapi.core.IHttpAdapter;
import com.larksuite.oapi.core.exception.AuthChallengeException;
import com.larksuite.oapi.core.exception.EventDecryptionException;
import com.larksuite.oapi.core.exception.EventTypeAlreadyHasHandlerException;
import com.larksuite.oapi.core.exception.SignatureVerificationException;
import com.larksuite.oapi.core.request.EventReq;
import com.larksuite.oapi.core.response.EventResp;
import com.larksuite.oapi.core.utils.Decryptor;
import com.larksuite.oapi.core.utils.Jsons;
import com.larksuite.oapi.core.utils.Strings;
import com.larksuite.oapi.event.exception.NotFoundHandlerException;
import com.larksuite.oapi.event.model.Fuzzy;
import com.larksuite.oapi.service.acs.v1.AcsService;
import com.larksuite.oapi.service.application.v6.ApplicationService;
import com.larksuite.oapi.service.approval.v4.ApprovalService;
import com.larksuite.oapi.service.calendar.v4.CalendarService;
import com.larksuite.oapi.service.contact.v3.ContactService;
import com.larksuite.oapi.service.drive.v1.DriveService;
import com.larksuite.oapi.service.im.v1.ImService;
import com.larksuite.oapi.service.task.v1.TaskService;
import com.larksuite.oapi.service.vc.v1.VcService;
import org.apache.commons.codec.binary.Hex;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.UnsupportedEncodingException;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.HashMap;
import java.util.Map;

public class EventDispatcher implements IHandler {
    private static final Logger log = LoggerFactory.getLogger(EventDispatcher.class);
    private Map<String, IEventHandler> eventType2EventHandler = new HashMap<>();
    private String verificationToken;
    private String encryptKey;

    public EventDispatcher(Builder builder) {
        this.verificationToken = builder.verificationToken;
        this.encryptKey = builder.encryptKey;
        this.eventType2EventHandler = builder.eventType2EventHandler;
        eventType2EventHandler.put("app_ticket", new AppTicketEventHandler());
    }

    public static Builder newBuilder(String verificationToken, String encryptKey) {
        return new Builder(verificationToken, encryptKey);
    }

    public String getVerificationToken() {
        return verificationToken;
    }

    public String getEncryptKey() {
        return encryptKey;
    }

    private String parseReq(EventReq eventReq) throws UnsupportedEncodingException {
        log.debug("event req: {}", eventReq);
        if (!Strings.isEmpty(encryptKey)) {
            Fuzzy fuzzy = Jsons.DEFAULT_GSON.fromJson(new String(eventReq.getBody(), StandardCharsets.UTF_8), Fuzzy.class);
            if (fuzzy == null || Strings.isEmpty(fuzzy.getEncrypt())) {
                throw new EventDecryptionException();
            }
            return fuzzy.getEncrypt().trim();
        }
        return new String(eventReq.getBody(), StandardCharsets.UTF_8).trim();
    }

    private String decryptEvent(String cipherEventJsonStr) {
        if (!Strings.isEmpty(encryptKey)) {
            // 非线程安全，所以每次要new
            String plainEventJsonStr = new Decryptor(encryptKey).decrypt(cipherEventJsonStr);
            log.debug("plain Event: {}", plainEventJsonStr);
            return plainEventJsonStr.trim();
        }
        return cipherEventJsonStr;
    }

    private boolean verifySign(EventReq eventReq) throws NoSuchAlgorithmException {
        if (Strings.isEmpty(encryptKey)) {
            return true;
        }

        String cipherEventJsonStr = new String(eventReq.getBody(), StandardCharsets.UTF_8);
        String timestamp, nonce, sourceSign, targetSign;
        timestamp = eventReq.getHeaderFirstValue(Constants.X_LARK_REQUEST_TIMESTAMP);
        nonce = eventReq.getHeaderFirstValue(Constants.X_LARK_REQUEST_NONCE);
        sourceSign = eventReq.getHeaderFirstValue(Constants.X_LARK_SIGNATURE);
        targetSign = calculateSignature(timestamp, nonce, encryptKey, cipherEventJsonStr);
        return targetSign.equals(sourceSign);
    }

    protected String calculateSignature(String timestamp, String nonce, String encryptKey, String bodyString) throws NoSuchAlgorithmException {
        StringBuilder content = new StringBuilder();
        content.append(timestamp).append(nonce).append(encryptKey).append(bodyString);
        MessageDigest alg = MessageDigest.getInstance("SHA-256");
        String sign = Hex.encodeHexString(alg.digest(content.toString().getBytes()));
        return sign;
    }

    private EventResp doHandle(String plainEventJsonStr, String eventType, String reqType, String challenge, String token) throws Exception {
        EventResp resp = new EventResp();
        resp.setStatusCode(200);
        resp.setContentType(Constants.APPLICATION_JSON);

        // 使用challenge进行鉴权
        if (Constants.URL_VERIFICATION.equals(reqType)) {
            if (!verificationToken.equals(token)) {
                throw new AuthChallengeException();
            }

            resp.setBody(String.format(EventResp.CHALLENGE_RESPONSE_FORMAT,
                    challenge).getBytes(StandardCharsets.UTF_8));
            return resp;
        }

        // 查找处理器，进行处理
        IEventHandler handler = eventType2EventHandler.get(eventType);
        if (handler == null) {
            throw new NotFoundHandlerException(eventType);
        }

        Object eventMsg = handler.getEvent();
        eventMsg = Jsons.DEFAULT_GSON.fromJson(plainEventJsonStr, eventMsg.getClass());
        handler.handle(eventMsg);
        resp.setBody(String.format(EventResp.RESPONSE_FORMAT, "success").getBytes(StandardCharsets.UTF_8));
        return resp;
    }

    public EventResp handle(EventReq eventReq) throws Throwable {
        EventResp eventResp = new EventResp();
        eventResp.setStatusCode(200);
        eventResp.setContentType(Constants.CONTENT_TYPE);
        try {
            // 解析请求，如果需要的话
            String cipherEventJsonStr = parseReq(eventReq);

            // 解密请求，如果需要的话
            String plainEventJsonStr = decryptEvent(cipherEventJsonStr);

            // 解析关键字段
            Fuzzy fuzzy = Jsons.DEFAULT_GSON.fromJson(plainEventJsonStr, Fuzzy.class);
            String token = fuzzy.getToken();
            String eventType = "";
            if (fuzzy.getEvent() != null) {
                eventType = fuzzy.getEvent().getType();
            }
            if (fuzzy.getHeader() != null) {
                token = fuzzy.getHeader().getToken();
                eventType = fuzzy.getHeader().getEventType();
            }
            String challenge = fuzzy.getChallenge();
            String reqType = fuzzy.getType();

            // 验签逻辑
            if (!Constants.URL_VERIFICATION.equals(reqType)) {
                if (!verifySign(eventReq)) {
                    throw new SignatureVerificationException();
                }
            }

            // 处理逻辑
            return doHandle(plainEventJsonStr, eventType, reqType, challenge, token);
        } catch (Throwable e) {
            log.error("handle event failed,requestId:{},err:{}", eventReq.getRequestID(), e);
            if (e instanceof NotFoundHandlerException) {
                eventResp.setBody(String.format(EventResp.RESPONSE_FORMAT,
                        e.getMessage()).getBytes(StandardCharsets.UTF_8));
                return eventResp;
            }

            eventResp.setStatusCode(500);
            eventResp.setBody(String.format(EventResp.RESPONSE_FORMAT,
                    e.getMessage()).getBytes(StandardCharsets.UTF_8));
        }

        return eventResp;
    }

    public void handle(IHttpAdapter httpAdapter) throws Throwable {
        EventResp eventResp = new EventResp();
        eventResp.setStatusCode(200);
        eventResp.setContentType(Constants.CONTENT_TYPE);
        EventReq eventReq = null;
        try {
            eventReq = httpAdapter.getEventReq();
            // 解析请求，如果需要的话
            String cipherEventJsonStr = parseReq(eventReq);

            // 解密请求，如果需要的话
            String plainEventJsonStr = decryptEvent(cipherEventJsonStr);

            // 解析关键字段
            Fuzzy fuzzy = Jsons.DEFAULT_GSON.fromJson(plainEventJsonStr, Fuzzy.class);
            String token = fuzzy.getToken();
            String eventType = "";
            if (fuzzy.getEvent() != null) {
                eventType = fuzzy.getEvent().getType();
            }
            if (fuzzy.getHeader() != null) {
                token = fuzzy.getHeader().getToken();
                eventType = fuzzy.getHeader().getEventType();
            }
            String challenge = fuzzy.getChallenge();
            String reqType = fuzzy.getType();

            // 验签逻辑
            if (!Constants.URL_VERIFICATION.equals(reqType)) {
                if (!verifySign(eventReq)) {
                    throw new SignatureVerificationException();
                }
            }

            // 处理逻辑
            eventResp = doHandle(plainEventJsonStr, eventType, reqType, challenge, token);
        } catch (Throwable e) {
            log.error("handle event failed,requestId:{},err:{}", eventReq == null ? "" : eventReq.getRequestID(), e);
            if (e instanceof NotFoundHandlerException) {
                eventResp.setBody(String.format(EventResp.RESPONSE_FORMAT,
                        e.getMessage()).getBytes(StandardCharsets.UTF_8));
            } else {
                eventResp.setStatusCode(500);
                eventResp.setBody(String.format(EventResp.RESPONSE_FORMAT,
                        e.getMessage()).getBytes(StandardCharsets.UTF_8));
            }
        }
        httpAdapter.writeResp(eventResp);
    }

    public static class Builder {
        private Map<String, IEventHandler> eventType2EventHandler = new HashMap<>();
        private String verificationToken;
        private String encryptKey;

        public Builder(String verificationToken, String encryptKey) {
            this.verificationToken = verificationToken;
            this.encryptKey = encryptKey;
        }

        public EventDispatcher build() {
            return new EventDispatcher(this);
        }

        public Builder onAccessRecordCreatedV1(AcsService.AccessRecordCreatedEventHandler handler) {
            if (eventType2EventHandler.containsKey("acs.access_record.created_v1")) {
                throw new EventTypeAlreadyHasHandlerException("acs.access_record.created_v1");
            }
            eventType2EventHandler.put("acs.access_record.created_v1", handler);
            return this;
        }

        public Builder onUserUpdatedV1(AcsService.UserUpdatedEventHandler handler) {
            if (eventType2EventHandler.containsKey("acs.user.updated_v1")) {
                throw new EventTypeAlreadyHasHandlerException("acs.user.updated_v1");
            }
            eventType2EventHandler.put("acs.user.updated_v1", handler);
            return this;
        }


        public Builder onApplicationCreatedV6(ApplicationService.ApplicationCreatedEventHandler handler) {
            if (eventType2EventHandler.containsKey("application.application.created_v6")) {
                throw new EventTypeAlreadyHasHandlerException("application.application.created_v6");
            }
            eventType2EventHandler.put("application.application.created_v6", handler);
            return this;
        }

        public Builder onApplicationAppVersionAuditV6(ApplicationService.ApplicationAppVersionAuditEventHandler handler) {
            if (eventType2EventHandler.containsKey("application.application.app_version.audit_v6")) {
                throw new EventTypeAlreadyHasHandlerException("application.application.app_version.audit_v6");
            }
            eventType2EventHandler.put("application.application.app_version.audit_v6", handler);
            return this;
        }

        public Builder onApplicationAppVersionPublishApplyV6(ApplicationService.ApplicationAppVersionPublishApplyEventHandler handler) {
            if (eventType2EventHandler.containsKey("application.application.app_version.publish_apply_v6")) {
                throw new EventTypeAlreadyHasHandlerException("application.application.app_version.publish_apply_v6");
            }
            eventType2EventHandler.put("application.application.app_version.publish_apply_v6", handler);
            return this;
        }

        public Builder onApplicationAppVersionPublishRevokeV6(ApplicationService.ApplicationAppVersionPublishRevokeEventHandler handler) {
            if (eventType2EventHandler.containsKey("application.application.app_version.publish_revoke_v6")) {
                throw new EventTypeAlreadyHasHandlerException("application.application.app_version.publish_revoke_v6");
            }
            eventType2EventHandler.put("application.application.app_version.publish_revoke_v6", handler);
            return this;
        }

        public Builder onApplicationFeedbackCreatedV6(ApplicationService.ApplicationFeedbackCreatedEventHandler handler) {
            if (eventType2EventHandler.containsKey("application.application.feedback.created_v6")) {
                throw new EventTypeAlreadyHasHandlerException("application.application.feedback.created_v6");
            }
            eventType2EventHandler.put("application.application.feedback.created_v6", handler);
            return this;
        }

        public Builder onApplicationFeedbackUpdatedV6(ApplicationService.ApplicationFeedbackUpdatedEventHandler handler) {
            if (eventType2EventHandler.containsKey("application.application.feedback.updated_v6")) {
                throw new EventTypeAlreadyHasHandlerException("application.application.feedback.updated_v6");
            }
            eventType2EventHandler.put("application.application.feedback.updated_v6", handler);
            return this;
        }

        public Builder onApplicationVisibilityAddedV6(ApplicationService.ApplicationVisibilityAddedEventHandler handler) {
            if (eventType2EventHandler.containsKey("application.application.visibility.added_v6")) {
                throw new EventTypeAlreadyHasHandlerException("application.application.visibility.added_v6");
            }
            eventType2EventHandler.put("application.application.visibility.added_v6", handler);
            return this;
        }

        public Builder onApprovalUpdatedV4(ApprovalService.ApprovalUpdatedEventHandler handler) {
            if (eventType2EventHandler.containsKey("approval.approval.updated_v4")) {
                throw new EventTypeAlreadyHasHandlerException("approval.approval.updated_v4");
            }
            eventType2EventHandler.put("approval.approval.updated_v4", handler);
            return this;
        }


        public Builder onCalendarChangedV4(CalendarService.CalendarChangedEventHandler handler) {
            if (eventType2EventHandler.containsKey("calendar.calendar.changed_v4")) {
                throw new EventTypeAlreadyHasHandlerException("calendar.calendar.changed_v4");
            }
            eventType2EventHandler.put("calendar.calendar.changed_v4", handler);
            return this;
        }

        public Builder onCalendarAclCreatedV4(CalendarService.CalendarAclCreatedEventHandler handler) {
            if (eventType2EventHandler.containsKey("calendar.calendar.acl.created_v4")) {
                throw new EventTypeAlreadyHasHandlerException("calendar.calendar.acl.created_v4");
            }
            eventType2EventHandler.put("calendar.calendar.acl.created_v4", handler);
            return this;
        }

        public Builder onCalendarAclDeletedV4(CalendarService.CalendarAclDeletedEventHandler handler) {
            if (eventType2EventHandler.containsKey("calendar.calendar.acl.deleted_v4")) {
                throw new EventTypeAlreadyHasHandlerException("calendar.calendar.acl.deleted_v4");
            }
            eventType2EventHandler.put("calendar.calendar.acl.deleted_v4", handler);
            return this;
        }

        public Builder onCalendarEventChangedV4(CalendarService.CalendarEventChangedEventHandler handler) {
            if (eventType2EventHandler.containsKey("calendar.calendar.event.changed_v4")) {
                throw new EventTypeAlreadyHasHandlerException("calendar.calendar.event.changed_v4");
            }
            eventType2EventHandler.put("calendar.calendar.event.changed_v4", handler);
            return this;
        }

        public Builder onCustomAttrEventUpdatedV3(ContactService.CustomAttrEventUpdatedEventHandler handler) {
            if (eventType2EventHandler.containsKey("contact.custom_attr_event.updated_v3")) {
                throw new EventTypeAlreadyHasHandlerException("contact.custom_attr_event.updated_v3");
            }
            eventType2EventHandler.put("contact.custom_attr_event.updated_v3", handler);
            return this;
        }

        public Builder onDepartmentCreatedV3(ContactService.DepartmentCreatedEventHandler handler) {
            if (eventType2EventHandler.containsKey("contact.department.created_v3")) {
                throw new EventTypeAlreadyHasHandlerException("contact.department.created_v3");
            }
            eventType2EventHandler.put("contact.department.created_v3", handler);
            return this;
        }

        public Builder onDepartmentDeletedV3(ContactService.DepartmentDeletedEventHandler handler) {
            if (eventType2EventHandler.containsKey("contact.department.deleted_v3")) {
                throw new EventTypeAlreadyHasHandlerException("contact.department.deleted_v3");
            }
            eventType2EventHandler.put("contact.department.deleted_v3", handler);
            return this;
        }

        public Builder onDepartmentUpdatedV3(ContactService.DepartmentUpdatedEventHandler handler) {
            if (eventType2EventHandler.containsKey("contact.department.updated_v3")) {
                throw new EventTypeAlreadyHasHandlerException("contact.department.updated_v3");
            }
            eventType2EventHandler.put("contact.department.updated_v3", handler);
            return this;
        }

        public Builder onEmployeeTypeEnumActivedV3(ContactService.EmployeeTypeEnumActivedEventHandler handler) {
            if (eventType2EventHandler.containsKey("contact.employee_type_enum.actived_v3")) {
                throw new EventTypeAlreadyHasHandlerException("contact.employee_type_enum.actived_v3");
            }
            eventType2EventHandler.put("contact.employee_type_enum.actived_v3", handler);
            return this;
        }

        public Builder onEmployeeTypeEnumCreatedV3(ContactService.EmployeeTypeEnumCreatedEventHandler handler) {
            if (eventType2EventHandler.containsKey("contact.employee_type_enum.created_v3")) {
                throw new EventTypeAlreadyHasHandlerException("contact.employee_type_enum.created_v3");
            }
            eventType2EventHandler.put("contact.employee_type_enum.created_v3", handler);
            return this;
        }

        public Builder onEmployeeTypeEnumDeactivatedV3(ContactService.EmployeeTypeEnumDeactivatedEventHandler handler) {
            if (eventType2EventHandler.containsKey("contact.employee_type_enum.deactivated_v3")) {
                throw new EventTypeAlreadyHasHandlerException("contact.employee_type_enum.deactivated_v3");
            }
            eventType2EventHandler.put("contact.employee_type_enum.deactivated_v3", handler);
            return this;
        }

        public Builder onEmployeeTypeEnumDeletedV3(ContactService.EmployeeTypeEnumDeletedEventHandler handler) {
            if (eventType2EventHandler.containsKey("contact.employee_type_enum.deleted_v3")) {
                throw new EventTypeAlreadyHasHandlerException("contact.employee_type_enum.deleted_v3");
            }
            eventType2EventHandler.put("contact.employee_type_enum.deleted_v3", handler);
            return this;
        }

        public Builder onEmployeeTypeEnumUpdatedV3(ContactService.EmployeeTypeEnumUpdatedEventHandler handler) {
            if (eventType2EventHandler.containsKey("contact.employee_type_enum.updated_v3")) {
                throw new EventTypeAlreadyHasHandlerException("contact.employee_type_enum.updated_v3");
            }
            eventType2EventHandler.put("contact.employee_type_enum.updated_v3", handler);
            return this;
        }

        public Builder onScopeUpdatedV3(ContactService.ScopeUpdatedEventHandler handler) {
            if (eventType2EventHandler.containsKey("contact.scope.updated_v3")) {
                throw new EventTypeAlreadyHasHandlerException("contact.scope.updated_v3");
            }
            eventType2EventHandler.put("contact.scope.updated_v3", handler);
            return this;
        }

        public Builder onUserCreatedV3(ContactService.UserCreatedEventHandler handler) {
            if (eventType2EventHandler.containsKey("contact.user.created_v3")) {
                throw new EventTypeAlreadyHasHandlerException("contact.user.created_v3");
            }
            eventType2EventHandler.put("contact.user.created_v3", handler);
            return this;
        }

        public Builder onUserDeletedV3(ContactService.UserDeletedEventHandler handler) {
            if (eventType2EventHandler.containsKey("contact.user.deleted_v3")) {
                throw new EventTypeAlreadyHasHandlerException("contact.user.deleted_v3");
            }
            eventType2EventHandler.put("contact.user.deleted_v3", handler);
            return this;
        }

        public Builder onUserUpdatedV3(ContactService.UserUpdatedEventHandler handler) {
            if (eventType2EventHandler.containsKey("contact.user.updated_v3")) {
                throw new EventTypeAlreadyHasHandlerException("contact.user.updated_v3");
            }
            eventType2EventHandler.put("contact.user.updated_v3", handler);
            return this;
        }


        public Builder onFileDeletedV1(DriveService.FileDeletedEventHandler handler) {
            if (eventType2EventHandler.containsKey("drive.file.deleted_v1")) {
                throw new EventTypeAlreadyHasHandlerException("drive.file.deleted_v1");
            }
            eventType2EventHandler.put("drive.file.deleted_v1", handler);
            return this;
        }

        public Builder onFileEditV1(DriveService.FileEditEventHandler handler) {
            if (eventType2EventHandler.containsKey("drive.file.edit_v1")) {
                throw new EventTypeAlreadyHasHandlerException("drive.file.edit_v1");
            }
            eventType2EventHandler.put("drive.file.edit_v1", handler);
            return this;
        }

        public Builder onFilePermissionMemberAddedV1(DriveService.FilePermissionMemberAddedEventHandler handler) {
            if (eventType2EventHandler.containsKey("drive.file.permission_member_added_v1")) {
                throw new EventTypeAlreadyHasHandlerException("drive.file.permission_member_added_v1");
            }
            eventType2EventHandler.put("drive.file.permission_member_added_v1", handler);
            return this;
        }

        public Builder onFilePermissionMemberRemovedV1(DriveService.FilePermissionMemberRemovedEventHandler handler) {
            if (eventType2EventHandler.containsKey("drive.file.permission_member_removed_v1")) {
                throw new EventTypeAlreadyHasHandlerException("drive.file.permission_member_removed_v1");
            }
            eventType2EventHandler.put("drive.file.permission_member_removed_v1", handler);
            return this;
        }

        public Builder onFileReadV1(DriveService.FileReadEventHandler handler) {
            if (eventType2EventHandler.containsKey("drive.file.read_v1")) {
                throw new EventTypeAlreadyHasHandlerException("drive.file.read_v1");
            }
            eventType2EventHandler.put("drive.file.read_v1", handler);
            return this;
        }

        public Builder onFileTitleUpdatedV1(DriveService.FileTitleUpdatedEventHandler handler) {
            if (eventType2EventHandler.containsKey("drive.file.title_updated_v1")) {
                throw new EventTypeAlreadyHasHandlerException("drive.file.title_updated_v1");
            }
            eventType2EventHandler.put("drive.file.title_updated_v1", handler);
            return this;
        }

        public Builder onFileTrashedV1(DriveService.FileTrashedEventHandler handler) {
            if (eventType2EventHandler.containsKey("drive.file.trashed_v1")) {
                throw new EventTypeAlreadyHasHandlerException("drive.file.trashed_v1");
            }
            eventType2EventHandler.put("drive.file.trashed_v1", handler);
            return this;
        }


        public Builder onChatDisbandedV1(ImService.ChatDisbandedEventHandler handler) {
            if (eventType2EventHandler.containsKey("im.chat.disbanded_v1")) {
                throw new EventTypeAlreadyHasHandlerException("im.chat.disbanded_v1");
            }
            eventType2EventHandler.put("im.chat.disbanded_v1", handler);
            return this;
        }

        public Builder onChatUpdatedV1(ImService.ChatUpdatedEventHandler handler) {
            if (eventType2EventHandler.containsKey("im.chat.updated_v1")) {
                throw new EventTypeAlreadyHasHandlerException("im.chat.updated_v1");
            }
            eventType2EventHandler.put("im.chat.updated_v1", handler);
            return this;
        }

        public Builder onChatMemberBotAddedV1(ImService.ChatMemberBotAddedEventHandler handler) {
            if (eventType2EventHandler.containsKey("im.chat.member.bot.added_v1")) {
                throw new EventTypeAlreadyHasHandlerException("im.chat.member.bot.added_v1");
            }
            eventType2EventHandler.put("im.chat.member.bot.added_v1", handler);
            return this;
        }

        public Builder onChatMemberBotDeletedV1(ImService.ChatMemberBotDeletedEventHandler handler) {
            if (eventType2EventHandler.containsKey("im.chat.member.bot.deleted_v1")) {
                throw new EventTypeAlreadyHasHandlerException("im.chat.member.bot.deleted_v1");
            }
            eventType2EventHandler.put("im.chat.member.bot.deleted_v1", handler);
            return this;
        }

        public Builder onChatMemberUserAddedV1(ImService.ChatMemberUserAddedEventHandler handler) {
            if (eventType2EventHandler.containsKey("im.chat.member.user.added_v1")) {
                throw new EventTypeAlreadyHasHandlerException("im.chat.member.user.added_v1");
            }
            eventType2EventHandler.put("im.chat.member.user.added_v1", handler);
            return this;
        }

        public Builder onChatMemberUserDeletedV1(ImService.ChatMemberUserDeletedEventHandler handler) {
            if (eventType2EventHandler.containsKey("im.chat.member.user.deleted_v1")) {
                throw new EventTypeAlreadyHasHandlerException("im.chat.member.user.deleted_v1");
            }
            eventType2EventHandler.put("im.chat.member.user.deleted_v1", handler);
            return this;
        }

        public Builder onChatMemberUserWithdrawnV1(ImService.ChatMemberUserWithdrawnEventHandler handler) {
            if (eventType2EventHandler.containsKey("im.chat.member.user.withdrawn_v1")) {
                throw new EventTypeAlreadyHasHandlerException("im.chat.member.user.withdrawn_v1");
            }
            eventType2EventHandler.put("im.chat.member.user.withdrawn_v1", handler);
            return this;
        }

        public Builder onMessageReadV1(ImService.MessageReadEventHandler handler) {
            if (eventType2EventHandler.containsKey("im.message.message_read_v1")) {
                throw new EventTypeAlreadyHasHandlerException("im.message.message_read_v1");
            }
            eventType2EventHandler.put("im.message.message_read_v1", handler);
            return this;
        }

        public Builder onMessageReceiveV1(ImService.MessageReceiveEventHandler handler) {
            if (eventType2EventHandler.containsKey("im.message.receive_v1")) {
                throw new EventTypeAlreadyHasHandlerException("im.message.receive_v1");
            }
            eventType2EventHandler.put("im.message.receive_v1", handler);
            return this;
        }

        public Builder onMessageReactionCreatedV1(ImService.MessageReactionCreatedEventHandler handler) {
            if (eventType2EventHandler.containsKey("im.message.reaction.created_v1")) {
                throw new EventTypeAlreadyHasHandlerException("im.message.reaction.created_v1");
            }
            eventType2EventHandler.put("im.message.reaction.created_v1", handler);
            return this;
        }

        public Builder onMessageReactionDeletedV1(ImService.MessageReactionDeletedEventHandler handler) {
            if (eventType2EventHandler.containsKey("im.message.reaction.deleted_v1")) {
                throw new EventTypeAlreadyHasHandlerException("im.message.reaction.deleted_v1");
            }
            eventType2EventHandler.put("im.message.reaction.deleted_v1", handler);
            return this;
        }


        public Builder onTaskUpdateTenantV1(TaskService.TaskUpdateTenantEventHandler handler) {
            if (eventType2EventHandler.containsKey("task.task.update_tenant_v1")) {
                throw new EventTypeAlreadyHasHandlerException("task.task.update_tenant_v1");
            }
            eventType2EventHandler.put("task.task.update_tenant_v1", handler);
            return this;
        }

        public Builder onTaskUpdatedV1(TaskService.TaskUpdatedEventHandler handler) {
            if (eventType2EventHandler.containsKey("task.task.updated_v1")) {
                throw new EventTypeAlreadyHasHandlerException("task.task.updated_v1");
            }
            eventType2EventHandler.put("task.task.updated_v1", handler);
            return this;
        }

        public Builder onTaskCommentUpdatedV1(TaskService.TaskCommentUpdatedEventHandler handler) {
            if (eventType2EventHandler.containsKey("task.task.comment.updated_v1")) {
                throw new EventTypeAlreadyHasHandlerException("task.task.comment.updated_v1");
            }
            eventType2EventHandler.put("task.task.comment.updated_v1", handler);
            return this;
        }


        public Builder onMeetingJoinMeetingV1(VcService.MeetingJoinMeetingEventHandler handler) {
            if (eventType2EventHandler.containsKey("vc.meeting.join_meeting_v1")) {
                throw new EventTypeAlreadyHasHandlerException("vc.meeting.join_meeting_v1");
            }
            eventType2EventHandler.put("vc.meeting.join_meeting_v1", handler);
            return this;
        }

        public Builder onMeetingLeaveMeetingV1(VcService.MeetingLeaveMeetingEventHandler handler) {
            if (eventType2EventHandler.containsKey("vc.meeting.leave_meeting_v1")) {
                throw new EventTypeAlreadyHasHandlerException("vc.meeting.leave_meeting_v1");
            }
            eventType2EventHandler.put("vc.meeting.leave_meeting_v1", handler);
            return this;
        }

        public Builder onMeetingEndedV1(VcService.MeetingEndedEventHandler handler) {
            if (eventType2EventHandler.containsKey("vc.meeting.meeting_ended_v1")) {
                throw new EventTypeAlreadyHasHandlerException("vc.meeting.meeting_ended_v1");
            }
            eventType2EventHandler.put("vc.meeting.meeting_ended_v1", handler);
            return this;
        }

        public Builder onMeetingStartedV1(VcService.MeetingStartedEventHandler handler) {
            if (eventType2EventHandler.containsKey("vc.meeting.meeting_started_v1")) {
                throw new EventTypeAlreadyHasHandlerException("vc.meeting.meeting_started_v1");
            }
            eventType2EventHandler.put("vc.meeting.meeting_started_v1", handler);
            return this;
        }

        public Builder onMeetingRecordingEndedV1(VcService.MeetingRecordingEndedEventHandler handler) {
            if (eventType2EventHandler.containsKey("vc.meeting.recording_ended_v1")) {
                throw new EventTypeAlreadyHasHandlerException("vc.meeting.recording_ended_v1");
            }
            eventType2EventHandler.put("vc.meeting.recording_ended_v1", handler);
            return this;
        }

        public Builder onMeetingRecordingReadyV1(VcService.MeetingRecordingReadyEventHandler handler) {
            if (eventType2EventHandler.containsKey("vc.meeting.recording_ready_v1")) {
                throw new EventTypeAlreadyHasHandlerException("vc.meeting.recording_ready_v1");
            }
            eventType2EventHandler.put("vc.meeting.recording_ready_v1", handler);
            return this;
        }

        public Builder onMeetingRecordingStartedV1(VcService.MeetingRecordingStartedEventHandler handler) {
            if (eventType2EventHandler.containsKey("vc.meeting.recording_started_v1")) {
                throw new EventTypeAlreadyHasHandlerException("vc.meeting.recording_started_v1");
            }
            eventType2EventHandler.put("vc.meeting.recording_started_v1", handler);
            return this;
        }

        public Builder onMeetingShareEndedV1(VcService.MeetingShareEndedEventHandler handler) {
            if (eventType2EventHandler.containsKey("vc.meeting.share_ended_v1")) {
                throw new EventTypeAlreadyHasHandlerException("vc.meeting.share_ended_v1");
            }
            eventType2EventHandler.put("vc.meeting.share_ended_v1", handler);
            return this;
        }

        public Builder onMeetingShareStartedV1(VcService.MeetingShareStartedEventHandler handler) {
            if (eventType2EventHandler.containsKey("vc.meeting.share_started_v1")) {
                throw new EventTypeAlreadyHasHandlerException("vc.meeting.share_started_v1");
            }
            eventType2EventHandler.put("vc.meeting.share_started_v1", handler);
            return this;
        }

    }

}


