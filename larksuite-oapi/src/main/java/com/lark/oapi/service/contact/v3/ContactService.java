// Code generated by lark suite oapi sdk gen
/*
 * MIT License
 *
 * Copyright (c) 2022 Lark Technologies Pte. Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice, shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package com.lark.oapi.service.contact.v3;

import com.lark.oapi.core.Config;
import com.lark.oapi.core.Transport;
import com.lark.oapi.core.request.RequestOptions;
import com.lark.oapi.core.response.RawResponse;
import com.lark.oapi.core.token.AccessTokenType;
import com.lark.oapi.core.utils.Sets;
import com.lark.oapi.core.utils.UnmarshalRespUtil;
import com.lark.oapi.event.IEventHandler;
import com.lark.oapi.service.contact.v3.model.AddGroupMemberReq;
import com.lark.oapi.service.contact.v3.model.AddGroupMemberResp;
import com.lark.oapi.service.contact.v3.model.BatchAddGroupMemberReq;
import com.lark.oapi.service.contact.v3.model.BatchAddGroupMemberResp;
import com.lark.oapi.service.contact.v3.model.BatchGetIdUserReq;
import com.lark.oapi.service.contact.v3.model.BatchGetIdUserResp;
import com.lark.oapi.service.contact.v3.model.BatchRemoveGroupMemberReq;
import com.lark.oapi.service.contact.v3.model.BatchRemoveGroupMemberResp;
import com.lark.oapi.service.contact.v3.model.BindDepartmentUnitReq;
import com.lark.oapi.service.contact.v3.model.BindDepartmentUnitResp;
import com.lark.oapi.service.contact.v3.model.ChildrenDepartmentReq;
import com.lark.oapi.service.contact.v3.model.ChildrenDepartmentResp;
import com.lark.oapi.service.contact.v3.model.CreateDepartmentReq;
import com.lark.oapi.service.contact.v3.model.CreateDepartmentResp;
import com.lark.oapi.service.contact.v3.model.CreateEmployeeTypeEnumReq;
import com.lark.oapi.service.contact.v3.model.CreateEmployeeTypeEnumResp;
import com.lark.oapi.service.contact.v3.model.CreateGroupReq;
import com.lark.oapi.service.contact.v3.model.CreateGroupResp;
import com.lark.oapi.service.contact.v3.model.CreateUnitReq;
import com.lark.oapi.service.contact.v3.model.CreateUnitResp;
import com.lark.oapi.service.contact.v3.model.CreateUserReq;
import com.lark.oapi.service.contact.v3.model.CreateUserResp;
import com.lark.oapi.service.contact.v3.model.DeleteDepartmentReq;
import com.lark.oapi.service.contact.v3.model.DeleteDepartmentResp;
import com.lark.oapi.service.contact.v3.model.DeleteEmployeeTypeEnumReq;
import com.lark.oapi.service.contact.v3.model.DeleteEmployeeTypeEnumResp;
import com.lark.oapi.service.contact.v3.model.DeleteGroupReq;
import com.lark.oapi.service.contact.v3.model.DeleteGroupResp;
import com.lark.oapi.service.contact.v3.model.DeleteUnitReq;
import com.lark.oapi.service.contact.v3.model.DeleteUnitResp;
import com.lark.oapi.service.contact.v3.model.DeleteUserReq;
import com.lark.oapi.service.contact.v3.model.DeleteUserResp;
import com.lark.oapi.service.contact.v3.model.FindByDepartmentUserReq;
import com.lark.oapi.service.contact.v3.model.FindByDepartmentUserResp;
import com.lark.oapi.service.contact.v3.model.GetDepartmentReq;
import com.lark.oapi.service.contact.v3.model.GetDepartmentResp;
import com.lark.oapi.service.contact.v3.model.GetGroupReq;
import com.lark.oapi.service.contact.v3.model.GetGroupResp;
import com.lark.oapi.service.contact.v3.model.GetUnitReq;
import com.lark.oapi.service.contact.v3.model.GetUnitResp;
import com.lark.oapi.service.contact.v3.model.GetUserReq;
import com.lark.oapi.service.contact.v3.model.GetUserResp;
import com.lark.oapi.service.contact.v3.model.ListCustomAttrReq;
import com.lark.oapi.service.contact.v3.model.ListCustomAttrResp;
import com.lark.oapi.service.contact.v3.model.ListDepartmentReq;
import com.lark.oapi.service.contact.v3.model.ListDepartmentResp;
import com.lark.oapi.service.contact.v3.model.ListDepartmentUnitReq;
import com.lark.oapi.service.contact.v3.model.ListDepartmentUnitResp;
import com.lark.oapi.service.contact.v3.model.ListEmployeeTypeEnumReq;
import com.lark.oapi.service.contact.v3.model.ListEmployeeTypeEnumResp;
import com.lark.oapi.service.contact.v3.model.ListScopeReq;
import com.lark.oapi.service.contact.v3.model.ListScopeResp;
import com.lark.oapi.service.contact.v3.model.ListUnitReq;
import com.lark.oapi.service.contact.v3.model.ListUnitResp;
import com.lark.oapi.service.contact.v3.model.ListUserReq;
import com.lark.oapi.service.contact.v3.model.ListUserResp;
import com.lark.oapi.service.contact.v3.model.MemberBelongGroupReq;
import com.lark.oapi.service.contact.v3.model.MemberBelongGroupResp;
import com.lark.oapi.service.contact.v3.model.P1ContactScopeChangedV3;
import com.lark.oapi.service.contact.v3.model.P1DepartmentChangedV3;
import com.lark.oapi.service.contact.v3.model.P1UserChangedV3;
import com.lark.oapi.service.contact.v3.model.P1UserStatusChangedV3;
import com.lark.oapi.service.contact.v3.model.P2CustomAttrEventUpdatedV3;
import com.lark.oapi.service.contact.v3.model.P2DepartmentCreatedV3;
import com.lark.oapi.service.contact.v3.model.P2DepartmentDeletedV3;
import com.lark.oapi.service.contact.v3.model.P2DepartmentUpdatedV3;
import com.lark.oapi.service.contact.v3.model.P2EmployeeTypeEnumActivedV3;
import com.lark.oapi.service.contact.v3.model.P2EmployeeTypeEnumCreatedV3;
import com.lark.oapi.service.contact.v3.model.P2EmployeeTypeEnumDeactivatedV3;
import com.lark.oapi.service.contact.v3.model.P2EmployeeTypeEnumDeletedV3;
import com.lark.oapi.service.contact.v3.model.P2EmployeeTypeEnumUpdatedV3;
import com.lark.oapi.service.contact.v3.model.P2ScopeUpdatedV3;
import com.lark.oapi.service.contact.v3.model.P2UserCreatedV3;
import com.lark.oapi.service.contact.v3.model.P2UserDeletedV3;
import com.lark.oapi.service.contact.v3.model.P2UserUpdatedV3;
import com.lark.oapi.service.contact.v3.model.ParentDepartmentReq;
import com.lark.oapi.service.contact.v3.model.ParentDepartmentResp;
import com.lark.oapi.service.contact.v3.model.PatchDepartmentReq;
import com.lark.oapi.service.contact.v3.model.PatchDepartmentResp;
import com.lark.oapi.service.contact.v3.model.PatchGroupReq;
import com.lark.oapi.service.contact.v3.model.PatchGroupResp;
import com.lark.oapi.service.contact.v3.model.PatchUnitReq;
import com.lark.oapi.service.contact.v3.model.PatchUnitResp;
import com.lark.oapi.service.contact.v3.model.PatchUserReq;
import com.lark.oapi.service.contact.v3.model.PatchUserResp;
import com.lark.oapi.service.contact.v3.model.RemoveGroupMemberReq;
import com.lark.oapi.service.contact.v3.model.RemoveGroupMemberResp;
import com.lark.oapi.service.contact.v3.model.SearchDepartmentReq;
import com.lark.oapi.service.contact.v3.model.SearchDepartmentResp;
import com.lark.oapi.service.contact.v3.model.SimplelistGroupMemberReq;
import com.lark.oapi.service.contact.v3.model.SimplelistGroupMemberResp;
import com.lark.oapi.service.contact.v3.model.SimplelistGroupReq;
import com.lark.oapi.service.contact.v3.model.SimplelistGroupResp;
import com.lark.oapi.service.contact.v3.model.UnbindDepartmentChatDepartmentReq;
import com.lark.oapi.service.contact.v3.model.UnbindDepartmentChatDepartmentResp;
import com.lark.oapi.service.contact.v3.model.UnbindDepartmentUnitReq;
import com.lark.oapi.service.contact.v3.model.UnbindDepartmentUnitResp;
import com.lark.oapi.service.contact.v3.model.UpdateDepartmentReq;
import com.lark.oapi.service.contact.v3.model.UpdateDepartmentResp;
import com.lark.oapi.service.contact.v3.model.UpdateEmployeeTypeEnumReq;
import com.lark.oapi.service.contact.v3.model.UpdateEmployeeTypeEnumResp;
import com.lark.oapi.service.contact.v3.model.UpdateUserReq;
import com.lark.oapi.service.contact.v3.model.UpdateUserResp;

public class ContactService {

  private final CustomAttr customAttr;
  private final CustomAttrEvent customAttrEvent;
  private final Department department;
  private final EmployeeTypeEnum employeeTypeEnum;
  private final Group group;
  private final GroupMember groupMember;
  private final Scope scope;
  private final Unit unit;
  private final User user;

  public ContactService(Config config) {
    this.customAttr = new CustomAttr(config);
    this.customAttrEvent = new CustomAttrEvent(config);
    this.department = new Department(config);
    this.employeeTypeEnum = new EmployeeTypeEnum(config);
    this.group = new Group(config);
    this.groupMember = new GroupMember(config);
    this.scope = new Scope(config);
    this.unit = new Unit(config);
    this.user = new User(config);
  }

  public CustomAttr customAttr() {
    return customAttr;
  }

  public CustomAttrEvent customAttrEvent() {
    return customAttrEvent;
  }

  public Department department() {
    return department;
  }

  public EmployeeTypeEnum employeeTypeEnum() {
    return employeeTypeEnum;
  }

  public Group group() {
    return group;
  }

  public GroupMember groupMember() {
    return groupMember;
  }

  public Scope scope() {
    return scope;
  }

  public Unit unit() {
    return unit;
  }

  public User user() {
    return user;
  }

  public static class CustomAttr {

    private final Config config;

    public CustomAttr(Config config) {
      this.config = config;
    }

    public ListCustomAttrResp list(ListCustomAttrReq req, RequestOptions reqOptions)
        throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/contact/v3/custom_attrs"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      ListCustomAttrResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          ListCustomAttrResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public ListCustomAttrResp list(ListCustomAttrReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/contact/v3/custom_attrs"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      ListCustomAttrResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          ListCustomAttrResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }
  }

  public static class CustomAttrEvent {

    private final Config config;

    public CustomAttrEvent(Config config) {
      this.config = config;
    }
  }

  public static class Department {

    private final Config config;

    public Department(Config config) {
      this.config = config;
    }

    public ChildrenDepartmentResp children(ChildrenDepartmentReq req, RequestOptions reqOptions)
        throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/contact/v3/departments/:department_id/children"
          , Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
          , req);

      // 反序列化
      ChildrenDepartmentResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          ChildrenDepartmentResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public ChildrenDepartmentResp children(ChildrenDepartmentReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/contact/v3/departments/:department_id/children"
          , Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
          , req);

      // 反序列化
      ChildrenDepartmentResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          ChildrenDepartmentResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public CreateDepartmentResp create(CreateDepartmentReq req, RequestOptions reqOptions)
        throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "POST"
          , "/open-apis/contact/v3/departments"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      CreateDepartmentResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          CreateDepartmentResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public CreateDepartmentResp create(CreateDepartmentReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "POST"
          , "/open-apis/contact/v3/departments"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      CreateDepartmentResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          CreateDepartmentResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public DeleteDepartmentResp delete(DeleteDepartmentReq req, RequestOptions reqOptions)
        throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "DELETE"
          , "/open-apis/contact/v3/departments/:department_id"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      DeleteDepartmentResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          DeleteDepartmentResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public DeleteDepartmentResp delete(DeleteDepartmentReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "DELETE"
          , "/open-apis/contact/v3/departments/:department_id"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      DeleteDepartmentResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          DeleteDepartmentResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public GetDepartmentResp get(GetDepartmentReq req, RequestOptions reqOptions) throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/contact/v3/departments/:department_id"
          , Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
          , req);

      // 反序列化
      GetDepartmentResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          GetDepartmentResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public GetDepartmentResp get(GetDepartmentReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/contact/v3/departments/:department_id"
          , Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
          , req);

      // 反序列化
      GetDepartmentResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          GetDepartmentResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public ListDepartmentResp list(ListDepartmentReq req, RequestOptions reqOptions)
        throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/contact/v3/departments"
          , Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
          , req);

      // 反序列化
      ListDepartmentResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          ListDepartmentResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public ListDepartmentResp list(ListDepartmentReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/contact/v3/departments"
          , Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
          , req);

      // 反序列化
      ListDepartmentResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          ListDepartmentResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public ParentDepartmentResp parent(ParentDepartmentReq req, RequestOptions reqOptions)
        throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/contact/v3/departments/parent"
          , Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
          , req);

      // 反序列化
      ParentDepartmentResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          ParentDepartmentResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public ParentDepartmentResp parent(ParentDepartmentReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/contact/v3/departments/parent"
          , Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
          , req);

      // 反序列化
      ParentDepartmentResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          ParentDepartmentResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public PatchDepartmentResp patch(PatchDepartmentReq req, RequestOptions reqOptions)
        throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "PATCH"
          , "/open-apis/contact/v3/departments/:department_id"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      PatchDepartmentResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          PatchDepartmentResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public PatchDepartmentResp patch(PatchDepartmentReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "PATCH"
          , "/open-apis/contact/v3/departments/:department_id"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      PatchDepartmentResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          PatchDepartmentResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public SearchDepartmentResp search(SearchDepartmentReq req, RequestOptions reqOptions)
        throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "POST"
          , "/open-apis/contact/v3/departments/search"
          , Sets.newHashSet(AccessTokenType.User)
          , req);

      // 反序列化
      SearchDepartmentResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          SearchDepartmentResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public SearchDepartmentResp search(SearchDepartmentReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "POST"
          , "/open-apis/contact/v3/departments/search"
          , Sets.newHashSet(AccessTokenType.User)
          , req);

      // 反序列化
      SearchDepartmentResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          SearchDepartmentResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public UnbindDepartmentChatDepartmentResp unbindDepartmentChat(
        UnbindDepartmentChatDepartmentReq req, RequestOptions reqOptions) throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "POST"
          , "/open-apis/contact/v3/departments/unbind_department_chat"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      UnbindDepartmentChatDepartmentResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          UnbindDepartmentChatDepartmentResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public UnbindDepartmentChatDepartmentResp unbindDepartmentChat(
        UnbindDepartmentChatDepartmentReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "POST"
          , "/open-apis/contact/v3/departments/unbind_department_chat"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      UnbindDepartmentChatDepartmentResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          UnbindDepartmentChatDepartmentResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public UpdateDepartmentResp update(UpdateDepartmentReq req, RequestOptions reqOptions)
        throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "PUT"
          , "/open-apis/contact/v3/departments/:department_id"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      UpdateDepartmentResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          UpdateDepartmentResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public UpdateDepartmentResp update(UpdateDepartmentReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "PUT"
          , "/open-apis/contact/v3/departments/:department_id"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      UpdateDepartmentResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          UpdateDepartmentResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }
  }

  public static class EmployeeTypeEnum {

    private final Config config;

    public EmployeeTypeEnum(Config config) {
      this.config = config;
    }

    public CreateEmployeeTypeEnumResp create(CreateEmployeeTypeEnumReq req,
        RequestOptions reqOptions) throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "POST"
          , "/open-apis/contact/v3/employee_type_enums"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      CreateEmployeeTypeEnumResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          CreateEmployeeTypeEnumResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public CreateEmployeeTypeEnumResp create(CreateEmployeeTypeEnumReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "POST"
          , "/open-apis/contact/v3/employee_type_enums"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      CreateEmployeeTypeEnumResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          CreateEmployeeTypeEnumResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public DeleteEmployeeTypeEnumResp delete(DeleteEmployeeTypeEnumReq req,
        RequestOptions reqOptions) throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "DELETE"
          , "/open-apis/contact/v3/employee_type_enums/:enum_id"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      DeleteEmployeeTypeEnumResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          DeleteEmployeeTypeEnumResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public DeleteEmployeeTypeEnumResp delete(DeleteEmployeeTypeEnumReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "DELETE"
          , "/open-apis/contact/v3/employee_type_enums/:enum_id"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      DeleteEmployeeTypeEnumResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          DeleteEmployeeTypeEnumResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public ListEmployeeTypeEnumResp list(ListEmployeeTypeEnumReq req, RequestOptions reqOptions)
        throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/contact/v3/employee_type_enums"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      ListEmployeeTypeEnumResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          ListEmployeeTypeEnumResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public ListEmployeeTypeEnumResp list(ListEmployeeTypeEnumReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/contact/v3/employee_type_enums"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      ListEmployeeTypeEnumResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          ListEmployeeTypeEnumResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public UpdateEmployeeTypeEnumResp update(UpdateEmployeeTypeEnumReq req,
        RequestOptions reqOptions) throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "PUT"
          , "/open-apis/contact/v3/employee_type_enums/:enum_id"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      UpdateEmployeeTypeEnumResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          UpdateEmployeeTypeEnumResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public UpdateEmployeeTypeEnumResp update(UpdateEmployeeTypeEnumReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "PUT"
          , "/open-apis/contact/v3/employee_type_enums/:enum_id"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      UpdateEmployeeTypeEnumResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          UpdateEmployeeTypeEnumResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }
  }

  public static class Group {

    private final Config config;

    public Group(Config config) {
      this.config = config;
    }

    public CreateGroupResp create(CreateGroupReq req, RequestOptions reqOptions) throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "POST"
          , "/open-apis/contact/v3/group"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      CreateGroupResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, CreateGroupResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public CreateGroupResp create(CreateGroupReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "POST"
          , "/open-apis/contact/v3/group"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      CreateGroupResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, CreateGroupResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public DeleteGroupResp delete(DeleteGroupReq req, RequestOptions reqOptions) throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "DELETE"
          , "/open-apis/contact/v3/group/:group_id"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      DeleteGroupResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, DeleteGroupResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public DeleteGroupResp delete(DeleteGroupReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "DELETE"
          , "/open-apis/contact/v3/group/:group_id"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      DeleteGroupResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, DeleteGroupResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public GetGroupResp get(GetGroupReq req, RequestOptions reqOptions) throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/contact/v3/group/:group_id"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      GetGroupResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, GetGroupResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public GetGroupResp get(GetGroupReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/contact/v3/group/:group_id"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      GetGroupResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, GetGroupResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public MemberBelongGroupResp memberBelong(MemberBelongGroupReq req, RequestOptions reqOptions)
        throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/contact/v3/group/member_belong"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      MemberBelongGroupResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          MemberBelongGroupResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public MemberBelongGroupResp memberBelong(MemberBelongGroupReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/contact/v3/group/member_belong"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      MemberBelongGroupResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          MemberBelongGroupResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public PatchGroupResp patch(PatchGroupReq req, RequestOptions reqOptions) throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "PATCH"
          , "/open-apis/contact/v3/group/:group_id"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      PatchGroupResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, PatchGroupResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public PatchGroupResp patch(PatchGroupReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "PATCH"
          , "/open-apis/contact/v3/group/:group_id"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      PatchGroupResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, PatchGroupResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public SimplelistGroupResp simplelist(SimplelistGroupReq req, RequestOptions reqOptions)
        throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/contact/v3/group/simplelist"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      SimplelistGroupResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          SimplelistGroupResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public SimplelistGroupResp simplelist(SimplelistGroupReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/contact/v3/group/simplelist"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      SimplelistGroupResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          SimplelistGroupResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }
  }

  public static class GroupMember {

    private final Config config;

    public GroupMember(Config config) {
      this.config = config;
    }

    public AddGroupMemberResp add(AddGroupMemberReq req, RequestOptions reqOptions)
        throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "POST"
          , "/open-apis/contact/v3/group/:group_id/member/add"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      AddGroupMemberResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          AddGroupMemberResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public AddGroupMemberResp add(AddGroupMemberReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "POST"
          , "/open-apis/contact/v3/group/:group_id/member/add"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      AddGroupMemberResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          AddGroupMemberResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public BatchAddGroupMemberResp batchAdd(BatchAddGroupMemberReq req, RequestOptions reqOptions)
        throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "POST"
          , "/open-apis/contact/v3/group/:group_id/member/batch_add"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      BatchAddGroupMemberResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          BatchAddGroupMemberResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public BatchAddGroupMemberResp batchAdd(BatchAddGroupMemberReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "POST"
          , "/open-apis/contact/v3/group/:group_id/member/batch_add"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      BatchAddGroupMemberResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          BatchAddGroupMemberResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public BatchRemoveGroupMemberResp batchRemove(BatchRemoveGroupMemberReq req,
        RequestOptions reqOptions) throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "POST"
          , "/open-apis/contact/v3/group/:group_id/member/batch_remove"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      BatchRemoveGroupMemberResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          BatchRemoveGroupMemberResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public BatchRemoveGroupMemberResp batchRemove(BatchRemoveGroupMemberReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "POST"
          , "/open-apis/contact/v3/group/:group_id/member/batch_remove"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      BatchRemoveGroupMemberResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          BatchRemoveGroupMemberResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public RemoveGroupMemberResp remove(RemoveGroupMemberReq req, RequestOptions reqOptions)
        throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "POST"
          , "/open-apis/contact/v3/group/:group_id/member/remove"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      RemoveGroupMemberResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          RemoveGroupMemberResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public RemoveGroupMemberResp remove(RemoveGroupMemberReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "POST"
          , "/open-apis/contact/v3/group/:group_id/member/remove"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      RemoveGroupMemberResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          RemoveGroupMemberResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public SimplelistGroupMemberResp simplelist(SimplelistGroupMemberReq req,
        RequestOptions reqOptions) throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/contact/v3/group/:group_id/member/simplelist"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      SimplelistGroupMemberResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          SimplelistGroupMemberResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public SimplelistGroupMemberResp simplelist(SimplelistGroupMemberReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/contact/v3/group/:group_id/member/simplelist"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      SimplelistGroupMemberResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          SimplelistGroupMemberResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }
  }

  public static class Scope {

    private final Config config;

    public Scope(Config config) {
      this.config = config;
    }

    public ListScopeResp list(ListScopeReq req, RequestOptions reqOptions) throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/contact/v3/scopes"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      ListScopeResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, ListScopeResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public ListScopeResp list(ListScopeReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/contact/v3/scopes"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      ListScopeResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, ListScopeResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }
  }

  public static class Unit {

    private final Config config;

    public Unit(Config config) {
      this.config = config;
    }

    public BindDepartmentUnitResp bindDepartment(BindDepartmentUnitReq req,
        RequestOptions reqOptions) throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "POST"
          , "/open-apis/contact/v3/unit/bind_department"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      BindDepartmentUnitResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          BindDepartmentUnitResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public BindDepartmentUnitResp bindDepartment(BindDepartmentUnitReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "POST"
          , "/open-apis/contact/v3/unit/bind_department"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      BindDepartmentUnitResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          BindDepartmentUnitResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public CreateUnitResp create(CreateUnitReq req, RequestOptions reqOptions) throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "POST"
          , "/open-apis/contact/v3/unit"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      CreateUnitResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, CreateUnitResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public CreateUnitResp create(CreateUnitReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "POST"
          , "/open-apis/contact/v3/unit"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      CreateUnitResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, CreateUnitResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public DeleteUnitResp delete(DeleteUnitReq req, RequestOptions reqOptions) throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "DELETE"
          , "/open-apis/contact/v3/unit/:unit_id"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      DeleteUnitResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, DeleteUnitResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public DeleteUnitResp delete(DeleteUnitReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "DELETE"
          , "/open-apis/contact/v3/unit/:unit_id"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      DeleteUnitResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, DeleteUnitResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public GetUnitResp get(GetUnitReq req, RequestOptions reqOptions) throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/contact/v3/unit/:unit_id"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      GetUnitResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, GetUnitResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public GetUnitResp get(GetUnitReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/contact/v3/unit/:unit_id"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      GetUnitResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, GetUnitResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public ListUnitResp list(ListUnitReq req, RequestOptions reqOptions) throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/contact/v3/unit"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      ListUnitResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, ListUnitResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public ListUnitResp list(ListUnitReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/contact/v3/unit"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      ListUnitResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, ListUnitResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public ListDepartmentUnitResp listDepartment(ListDepartmentUnitReq req,
        RequestOptions reqOptions) throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/contact/v3/unit/list_department"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      ListDepartmentUnitResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          ListDepartmentUnitResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public ListDepartmentUnitResp listDepartment(ListDepartmentUnitReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/contact/v3/unit/list_department"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      ListDepartmentUnitResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          ListDepartmentUnitResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public PatchUnitResp patch(PatchUnitReq req, RequestOptions reqOptions) throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "PATCH"
          , "/open-apis/contact/v3/unit/:unit_id"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      PatchUnitResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, PatchUnitResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public PatchUnitResp patch(PatchUnitReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "PATCH"
          , "/open-apis/contact/v3/unit/:unit_id"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      PatchUnitResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, PatchUnitResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public UnbindDepartmentUnitResp unbindDepartment(UnbindDepartmentUnitReq req,
        RequestOptions reqOptions) throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "POST"
          , "/open-apis/contact/v3/unit/unbind_department"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      UnbindDepartmentUnitResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          UnbindDepartmentUnitResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public UnbindDepartmentUnitResp unbindDepartment(UnbindDepartmentUnitReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "POST"
          , "/open-apis/contact/v3/unit/unbind_department"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      UnbindDepartmentUnitResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          UnbindDepartmentUnitResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }
  }

  public static class User {

    private final Config config;

    public User(Config config) {
      this.config = config;
    }

    public BatchGetIdUserResp batchGetId(BatchGetIdUserReq req, RequestOptions reqOptions)
        throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "POST"
          , "/open-apis/contact/v3/users/batch_get_id"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      BatchGetIdUserResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          BatchGetIdUserResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public BatchGetIdUserResp batchGetId(BatchGetIdUserReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "POST"
          , "/open-apis/contact/v3/users/batch_get_id"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      BatchGetIdUserResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          BatchGetIdUserResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public CreateUserResp create(CreateUserReq req, RequestOptions reqOptions) throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "POST"
          , "/open-apis/contact/v3/users"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      CreateUserResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, CreateUserResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public CreateUserResp create(CreateUserReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "POST"
          , "/open-apis/contact/v3/users"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      CreateUserResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, CreateUserResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public DeleteUserResp delete(DeleteUserReq req, RequestOptions reqOptions) throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "DELETE"
          , "/open-apis/contact/v3/users/:user_id"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      DeleteUserResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, DeleteUserResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public DeleteUserResp delete(DeleteUserReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "DELETE"
          , "/open-apis/contact/v3/users/:user_id"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      DeleteUserResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, DeleteUserResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public FindByDepartmentUserResp findByDepartment(FindByDepartmentUserReq req,
        RequestOptions reqOptions) throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/contact/v3/users/find_by_department"
          , Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
          , req);

      // 反序列化
      FindByDepartmentUserResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          FindByDepartmentUserResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public FindByDepartmentUserResp findByDepartment(FindByDepartmentUserReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/contact/v3/users/find_by_department"
          , Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
          , req);

      // 反序列化
      FindByDepartmentUserResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          FindByDepartmentUserResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public GetUserResp get(GetUserReq req, RequestOptions reqOptions) throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/contact/v3/users/:user_id"
          , Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
          , req);

      // 反序列化
      GetUserResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, GetUserResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public GetUserResp get(GetUserReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/contact/v3/users/:user_id"
          , Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
          , req);

      // 反序列化
      GetUserResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, GetUserResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public ListUserResp list(ListUserReq req, RequestOptions reqOptions) throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/contact/v3/users"
          , Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
          , req);

      // 反序列化
      ListUserResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, ListUserResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public ListUserResp list(ListUserReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/contact/v3/users"
          , Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
          , req);

      // 反序列化
      ListUserResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, ListUserResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public PatchUserResp patch(PatchUserReq req, RequestOptions reqOptions) throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "PATCH"
          , "/open-apis/contact/v3/users/:user_id"
          , Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
          , req);

      // 反序列化
      PatchUserResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, PatchUserResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public PatchUserResp patch(PatchUserReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "PATCH"
          , "/open-apis/contact/v3/users/:user_id"
          , Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
          , req);

      // 反序列化
      PatchUserResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, PatchUserResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public UpdateUserResp update(UpdateUserReq req, RequestOptions reqOptions) throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "PUT"
          , "/open-apis/contact/v3/users/:user_id"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      UpdateUserResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, UpdateUserResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }

    public UpdateUserResp update(UpdateUserReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "PUT"
          , "/open-apis/contact/v3/users/:user_id"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      UpdateUserResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, UpdateUserResp.class);
      resp.setRawResponse(httpResponse);
      return resp;
    }
  }

  public abstract static class P2CustomAttrEventUpdatedV3Handler implements
      IEventHandler<P2CustomAttrEventUpdatedV3> {

    @Override
    public P2CustomAttrEventUpdatedV3 getEvent() {
      return new P2CustomAttrEventUpdatedV3();
    }
  }

  public abstract static class P2DepartmentCreatedV3Handler implements
      IEventHandler<P2DepartmentCreatedV3> {

    @Override
    public P2DepartmentCreatedV3 getEvent() {
      return new P2DepartmentCreatedV3();
    }
  }

  public abstract static class P2DepartmentDeletedV3Handler implements
      IEventHandler<P2DepartmentDeletedV3> {

    @Override
    public P2DepartmentDeletedV3 getEvent() {
      return new P2DepartmentDeletedV3();
    }
  }

  public abstract static class P2DepartmentUpdatedV3Handler implements
      IEventHandler<P2DepartmentUpdatedV3> {

    @Override
    public P2DepartmentUpdatedV3 getEvent() {
      return new P2DepartmentUpdatedV3();
    }
  }

  public abstract static class P2EmployeeTypeEnumActivedV3Handler implements
      IEventHandler<P2EmployeeTypeEnumActivedV3> {

    @Override
    public P2EmployeeTypeEnumActivedV3 getEvent() {
      return new P2EmployeeTypeEnumActivedV3();
    }
  }

  public abstract static class P2EmployeeTypeEnumCreatedV3Handler implements
      IEventHandler<P2EmployeeTypeEnumCreatedV3> {

    @Override
    public P2EmployeeTypeEnumCreatedV3 getEvent() {
      return new P2EmployeeTypeEnumCreatedV3();
    }
  }

  public abstract static class P2EmployeeTypeEnumDeactivatedV3Handler implements
      IEventHandler<P2EmployeeTypeEnumDeactivatedV3> {

    @Override
    public P2EmployeeTypeEnumDeactivatedV3 getEvent() {
      return new P2EmployeeTypeEnumDeactivatedV3();
    }
  }

  public abstract static class P2EmployeeTypeEnumDeletedV3Handler implements
      IEventHandler<P2EmployeeTypeEnumDeletedV3> {

    @Override
    public P2EmployeeTypeEnumDeletedV3 getEvent() {
      return new P2EmployeeTypeEnumDeletedV3();
    }
  }

  public abstract static class P2EmployeeTypeEnumUpdatedV3Handler implements
      IEventHandler<P2EmployeeTypeEnumUpdatedV3> {

    @Override
    public P2EmployeeTypeEnumUpdatedV3 getEvent() {
      return new P2EmployeeTypeEnumUpdatedV3();
    }
  }

  public abstract static class P2ScopeUpdatedV3Handler implements IEventHandler<P2ScopeUpdatedV3> {

    @Override
    public P2ScopeUpdatedV3 getEvent() {
      return new P2ScopeUpdatedV3();
    }
  }

  public abstract static class P2UserCreatedV3Handler implements IEventHandler<P2UserCreatedV3> {

    @Override
    public P2UserCreatedV3 getEvent() {
      return new P2UserCreatedV3();
    }
  }

  public abstract static class P2UserDeletedV3Handler implements IEventHandler<P2UserDeletedV3> {

    @Override
    public P2UserDeletedV3 getEvent() {
      return new P2UserDeletedV3();
    }
  }

  public abstract static class P2UserUpdatedV3Handler implements IEventHandler<P2UserUpdatedV3> {

    @Override
    public P2UserUpdatedV3 getEvent() {
      return new P2UserUpdatedV3();
    }
  }

  public abstract static class P1UserChangedV3Handler implements IEventHandler<P1UserChangedV3> {

    @Override
    public P1UserChangedV3 getEvent() {
      return new P1UserChangedV3();
    }
  }

  public abstract static class P1UserStatusChangedV3Handler implements
      IEventHandler<P1UserStatusChangedV3> {

    @Override
    public P1UserStatusChangedV3 getEvent() {
      return new P1UserStatusChangedV3();
    }
  }

  public abstract static class P1DepartmentChangedV3Handler implements
      IEventHandler<P1DepartmentChangedV3> {

    @Override
    public P1DepartmentChangedV3 getEvent() {
      return new P1DepartmentChangedV3();
    }
  }

  public abstract static class P1ContactScopeChangedV3Handler implements
      IEventHandler<P1ContactScopeChangedV3> {

    @Override
    public P1ContactScopeChangedV3 getEvent() {
      return new P1ContactScopeChangedV3();
    }
  }
}