// Code generated by lark suite oapi sdk gen
package com.lark.oapi.service.vc.v1.model;

import com.google.gson.annotations.SerializedName;
import com.lark.oapi.core.annotation.Path;
import com.lark.oapi.core.annotation.Query;

public class GetActiveMeetingReserveReq {

  @Query
  @SerializedName("with_participants")
  private Boolean withParticipants;
  @Query
  @SerializedName("user_id_type")
  private String userIdType;
  @Path
  @SerializedName("reserve_id")
  private Long reserveId;

  // builder 开始
  public GetActiveMeetingReserveReq() {
  }

  public GetActiveMeetingReserveReq(Builder builder) {
    this.withParticipants = builder.withParticipants;
    this.userIdType = builder.userIdType;
    this.reserveId = builder.reserveId;
  }

  public static Builder newBuilder() {
    return new Builder();
  }

  public Boolean getWithParticipants() {
    return this.withParticipants;
  }

  public void setWithParticipants(Boolean withParticipants) {
    this.withParticipants = withParticipants;
  }

  public String getUserIdType() {
    return this.userIdType;
  }

  public void setUserIdType(String userIdType) {
    this.userIdType = userIdType;
  }

  public Long getReserveId() {
    return this.reserveId;
  }

  public void setReserveId(Long reserveId) {
    this.reserveId = reserveId;
  }

  public static class Builder {

    private Boolean withParticipants;
    private String userIdType;
    private Long reserveId;

    public Builder withParticipants(Boolean withParticipants) {
      this.withParticipants = withParticipants;
      return this;
    }

    public Builder userIdType(String userIdType) {
      this.userIdType = userIdType;
      return this;
    }

    public Builder userIdType(com.lark.oapi.service.vc.v1.enums.UserIdTypeEnum userIdType) {
      this.userIdType = userIdType.getValue();
      return this;
    }

    public Builder reserveId(Long reserveId) {
      this.reserveId = reserveId;
      return this;
    }

    public GetActiveMeetingReserveReq build() {
      return new GetActiveMeetingReserveReq(this);
    }
  }
}
