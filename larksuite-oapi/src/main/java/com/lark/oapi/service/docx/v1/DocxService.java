// Code generated by lark suite oapi sdk gen
/*
 * MIT License
 *
 * Copyright (c) 2022 Lark Technologies Pte. Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice, shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package com.lark.oapi.service.docx.v1;

import com.lark.oapi.core.Config;
import com.lark.oapi.core.Transport;
import com.lark.oapi.core.request.RequestOptions;
import com.lark.oapi.core.response.RawResponse;
import com.lark.oapi.core.token.AccessTokenType;
import com.lark.oapi.core.utils.Sets;
import com.lark.oapi.core.utils.UnmarshalRespUtil;
import com.lark.oapi.service.docx.v1.model.BatchDeleteDocumentBlockChildrenReq;
import com.lark.oapi.service.docx.v1.model.BatchDeleteDocumentBlockChildrenResp;
import com.lark.oapi.service.docx.v1.model.BatchUpdateDocumentBlockReq;
import com.lark.oapi.service.docx.v1.model.BatchUpdateDocumentBlockResp;
import com.lark.oapi.service.docx.v1.model.CreateDocumentBlockChildrenReq;
import com.lark.oapi.service.docx.v1.model.CreateDocumentBlockChildrenResp;
import com.lark.oapi.service.docx.v1.model.CreateDocumentReq;
import com.lark.oapi.service.docx.v1.model.CreateDocumentResp;
import com.lark.oapi.service.docx.v1.model.GetDocumentBlockChildrenReq;
import com.lark.oapi.service.docx.v1.model.GetDocumentBlockChildrenResp;
import com.lark.oapi.service.docx.v1.model.GetDocumentBlockReq;
import com.lark.oapi.service.docx.v1.model.GetDocumentBlockResp;
import com.lark.oapi.service.docx.v1.model.GetDocumentReq;
import com.lark.oapi.service.docx.v1.model.GetDocumentResp;
import com.lark.oapi.service.docx.v1.model.ListDocumentBlockReq;
import com.lark.oapi.service.docx.v1.model.ListDocumentBlockResp;
import com.lark.oapi.service.docx.v1.model.PatchDocumentBlockReq;
import com.lark.oapi.service.docx.v1.model.PatchDocumentBlockResp;
import com.lark.oapi.service.docx.v1.model.RawContentDocumentReq;
import com.lark.oapi.service.docx.v1.model.RawContentDocumentResp;

public class DocxService {

  private final Document document;
  private final DocumentBlock documentBlock;
  private final DocumentBlockChildren documentBlockChildren;

  public DocxService(Config config) {
    this.document = new Document(config);
    this.documentBlock = new DocumentBlock(config);
    this.documentBlockChildren = new DocumentBlockChildren(config);
  }

  public Document document() {
    return document;
  }

  public DocumentBlock documentBlock() {
    return documentBlock;
  }

  public DocumentBlockChildren documentBlockChildren() {
    return documentBlockChildren;
  }

  public static class Document {

    private final Config config;

    public Document(Config config) {
      this.config = config;
    }

    public CreateDocumentResp create(CreateDocumentReq req, RequestOptions reqOptions)
        throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      Boolean customSupportLong2Str = reqOptions.isSupportLong2String();
      reqOptions.setSupportLong2String(true);
      if (customSupportLong2Str != null) {
        reqOptions.setSupportLong2String(customSupportLong2Str);
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "POST"
          , "/open-apis/docx/v1/documents"
          , Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
          , req);

      // 反序列化
      CreateDocumentResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          CreateDocumentResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public CreateDocumentResp create(CreateDocumentReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();
      reqOptions.setSupportLong2String(true);

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "POST"
          , "/open-apis/docx/v1/documents"
          , Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
          , req);

      // 反序列化
      CreateDocumentResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          CreateDocumentResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public GetDocumentResp get(GetDocumentReq req, RequestOptions reqOptions) throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      Boolean customSupportLong2Str = reqOptions.isSupportLong2String();
      reqOptions.setSupportLong2String(true);
      if (customSupportLong2Str != null) {
        reqOptions.setSupportLong2String(customSupportLong2Str);
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/docx/v1/documents/:document_id"
          , Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
          , req);

      // 反序列化
      GetDocumentResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, GetDocumentResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public GetDocumentResp get(GetDocumentReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();
      reqOptions.setSupportLong2String(true);

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/docx/v1/documents/:document_id"
          , Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
          , req);

      // 反序列化
      GetDocumentResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, GetDocumentResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public RawContentDocumentResp rawContent(RawContentDocumentReq req, RequestOptions reqOptions)
        throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      Boolean customSupportLong2Str = reqOptions.isSupportLong2String();
      reqOptions.setSupportLong2String(true);
      if (customSupportLong2Str != null) {
        reqOptions.setSupportLong2String(customSupportLong2Str);
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/docx/v1/documents/:document_id/raw_content"
          , Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
          , req);

      // 反序列化
      RawContentDocumentResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          RawContentDocumentResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public RawContentDocumentResp rawContent(RawContentDocumentReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();
      reqOptions.setSupportLong2String(true);

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/docx/v1/documents/:document_id/raw_content"
          , Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
          , req);

      // 反序列化
      RawContentDocumentResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          RawContentDocumentResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }
  }

  public static class DocumentBlock {

    private final Config config;

    public DocumentBlock(Config config) {
      this.config = config;
    }

    public BatchUpdateDocumentBlockResp batchUpdate(BatchUpdateDocumentBlockReq req,
        RequestOptions reqOptions) throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      Boolean customSupportLong2Str = reqOptions.isSupportLong2String();
      reqOptions.setSupportLong2String(true);
      if (customSupportLong2Str != null) {
        reqOptions.setSupportLong2String(customSupportLong2Str);
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "PATCH"
          , "/open-apis/docx/v1/documents/:document_id/blocks/batch_update"
          , Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
          , req);

      // 反序列化
      BatchUpdateDocumentBlockResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          BatchUpdateDocumentBlockResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public BatchUpdateDocumentBlockResp batchUpdate(BatchUpdateDocumentBlockReq req)
        throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();
      reqOptions.setSupportLong2String(true);

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "PATCH"
          , "/open-apis/docx/v1/documents/:document_id/blocks/batch_update"
          , Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
          , req);

      // 反序列化
      BatchUpdateDocumentBlockResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          BatchUpdateDocumentBlockResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public GetDocumentBlockResp get(GetDocumentBlockReq req, RequestOptions reqOptions)
        throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      Boolean customSupportLong2Str = reqOptions.isSupportLong2String();
      reqOptions.setSupportLong2String(true);
      if (customSupportLong2Str != null) {
        reqOptions.setSupportLong2String(customSupportLong2Str);
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/docx/v1/documents/:document_id/blocks/:block_id"
          , Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
          , req);

      // 反序列化
      GetDocumentBlockResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          GetDocumentBlockResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public GetDocumentBlockResp get(GetDocumentBlockReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();
      reqOptions.setSupportLong2String(true);

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/docx/v1/documents/:document_id/blocks/:block_id"
          , Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
          , req);

      // 反序列化
      GetDocumentBlockResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          GetDocumentBlockResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public ListDocumentBlockResp list(ListDocumentBlockReq req, RequestOptions reqOptions)
        throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      Boolean customSupportLong2Str = reqOptions.isSupportLong2String();
      reqOptions.setSupportLong2String(true);
      if (customSupportLong2Str != null) {
        reqOptions.setSupportLong2String(customSupportLong2Str);
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/docx/v1/documents/:document_id/blocks"
          , Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
          , req);

      // 反序列化
      ListDocumentBlockResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          ListDocumentBlockResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public ListDocumentBlockResp list(ListDocumentBlockReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();
      reqOptions.setSupportLong2String(true);

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/docx/v1/documents/:document_id/blocks"
          , Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
          , req);

      // 反序列化
      ListDocumentBlockResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          ListDocumentBlockResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public PatchDocumentBlockResp patch(PatchDocumentBlockReq req, RequestOptions reqOptions)
        throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      Boolean customSupportLong2Str = reqOptions.isSupportLong2String();
      reqOptions.setSupportLong2String(true);
      if (customSupportLong2Str != null) {
        reqOptions.setSupportLong2String(customSupportLong2Str);
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "PATCH"
          , "/open-apis/docx/v1/documents/:document_id/blocks/:block_id"
          , Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
          , req);

      // 反序列化
      PatchDocumentBlockResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          PatchDocumentBlockResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public PatchDocumentBlockResp patch(PatchDocumentBlockReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();
      reqOptions.setSupportLong2String(true);

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "PATCH"
          , "/open-apis/docx/v1/documents/:document_id/blocks/:block_id"
          , Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
          , req);

      // 反序列化
      PatchDocumentBlockResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          PatchDocumentBlockResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }
  }

  public static class DocumentBlockChildren {

    private final Config config;

    public DocumentBlockChildren(Config config) {
      this.config = config;
    }

    public BatchDeleteDocumentBlockChildrenResp batchDelete(BatchDeleteDocumentBlockChildrenReq req,
        RequestOptions reqOptions) throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      Boolean customSupportLong2Str = reqOptions.isSupportLong2String();
      reqOptions.setSupportLong2String(true);
      if (customSupportLong2Str != null) {
        reqOptions.setSupportLong2String(customSupportLong2Str);
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "DELETE"
          , "/open-apis/docx/v1/documents/:document_id/blocks/:block_id/children/batch_delete"
          , Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
          , req);

      // 反序列化
      BatchDeleteDocumentBlockChildrenResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          BatchDeleteDocumentBlockChildrenResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public BatchDeleteDocumentBlockChildrenResp batchDelete(BatchDeleteDocumentBlockChildrenReq req)
        throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();
      reqOptions.setSupportLong2String(true);

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "DELETE"
          , "/open-apis/docx/v1/documents/:document_id/blocks/:block_id/children/batch_delete"
          , Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
          , req);

      // 反序列化
      BatchDeleteDocumentBlockChildrenResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          BatchDeleteDocumentBlockChildrenResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public CreateDocumentBlockChildrenResp create(CreateDocumentBlockChildrenReq req,
        RequestOptions reqOptions) throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      Boolean customSupportLong2Str = reqOptions.isSupportLong2String();
      reqOptions.setSupportLong2String(true);
      if (customSupportLong2Str != null) {
        reqOptions.setSupportLong2String(customSupportLong2Str);
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "POST"
          , "/open-apis/docx/v1/documents/:document_id/blocks/:block_id/children"
          , Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
          , req);

      // 反序列化
      CreateDocumentBlockChildrenResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          CreateDocumentBlockChildrenResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public CreateDocumentBlockChildrenResp create(CreateDocumentBlockChildrenReq req)
        throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();
      reqOptions.setSupportLong2String(true);

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "POST"
          , "/open-apis/docx/v1/documents/:document_id/blocks/:block_id/children"
          , Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
          , req);

      // 反序列化
      CreateDocumentBlockChildrenResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          CreateDocumentBlockChildrenResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public GetDocumentBlockChildrenResp get(GetDocumentBlockChildrenReq req,
        RequestOptions reqOptions) throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      Boolean customSupportLong2Str = reqOptions.isSupportLong2String();
      reqOptions.setSupportLong2String(true);
      if (customSupportLong2Str != null) {
        reqOptions.setSupportLong2String(customSupportLong2Str);
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/docx/v1/documents/:document_id/blocks/:block_id/children"
          , Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
          , req);

      // 反序列化
      GetDocumentBlockChildrenResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          GetDocumentBlockChildrenResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public GetDocumentBlockChildrenResp get(GetDocumentBlockChildrenReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();
      reqOptions.setSupportLong2String(true);

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/docx/v1/documents/:document_id/blocks/:block_id/children"
          , Sets.newHashSet(AccessTokenType.Tenant, AccessTokenType.User)
          , req);

      // 反序列化
      GetDocumentBlockChildrenResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          GetDocumentBlockChildrenResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }
  }

}