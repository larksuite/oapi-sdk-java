// Code generated by lark suite oapi sdk gen
/*
 * MIT License
 *
 * Copyright (c) 2022 Lark Technologies Pte. Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice, shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package com.lark.oapi.service.mail.v1;

import com.lark.oapi.core.Config;
import com.lark.oapi.core.Transport;
import com.lark.oapi.core.request.RequestOptions;
import com.lark.oapi.core.response.RawResponse;
import com.lark.oapi.core.token.AccessTokenType;
import com.lark.oapi.core.utils.Sets;
import com.lark.oapi.core.utils.UnmarshalRespUtil;
import com.lark.oapi.service.mail.v1.model.ClearPublicMailboxMemberReq;
import com.lark.oapi.service.mail.v1.model.ClearPublicMailboxMemberResp;
import com.lark.oapi.service.mail.v1.model.CreateMailgroupAliasReq;
import com.lark.oapi.service.mail.v1.model.CreateMailgroupAliasResp;
import com.lark.oapi.service.mail.v1.model.CreateMailgroupMemberReq;
import com.lark.oapi.service.mail.v1.model.CreateMailgroupMemberResp;
import com.lark.oapi.service.mail.v1.model.CreateMailgroupPermissionMemberReq;
import com.lark.oapi.service.mail.v1.model.CreateMailgroupPermissionMemberResp;
import com.lark.oapi.service.mail.v1.model.CreateMailgroupReq;
import com.lark.oapi.service.mail.v1.model.CreateMailgroupResp;
import com.lark.oapi.service.mail.v1.model.CreatePublicMailboxAliasReq;
import com.lark.oapi.service.mail.v1.model.CreatePublicMailboxAliasResp;
import com.lark.oapi.service.mail.v1.model.CreatePublicMailboxMemberReq;
import com.lark.oapi.service.mail.v1.model.CreatePublicMailboxMemberResp;
import com.lark.oapi.service.mail.v1.model.CreatePublicMailboxReq;
import com.lark.oapi.service.mail.v1.model.CreatePublicMailboxResp;
import com.lark.oapi.service.mail.v1.model.CreateUserMailboxAliasReq;
import com.lark.oapi.service.mail.v1.model.CreateUserMailboxAliasResp;
import com.lark.oapi.service.mail.v1.model.DeleteMailgroupAliasReq;
import com.lark.oapi.service.mail.v1.model.DeleteMailgroupAliasResp;
import com.lark.oapi.service.mail.v1.model.DeleteMailgroupMemberReq;
import com.lark.oapi.service.mail.v1.model.DeleteMailgroupMemberResp;
import com.lark.oapi.service.mail.v1.model.DeleteMailgroupPermissionMemberReq;
import com.lark.oapi.service.mail.v1.model.DeleteMailgroupPermissionMemberResp;
import com.lark.oapi.service.mail.v1.model.DeleteMailgroupReq;
import com.lark.oapi.service.mail.v1.model.DeleteMailgroupResp;
import com.lark.oapi.service.mail.v1.model.DeletePublicMailboxAliasReq;
import com.lark.oapi.service.mail.v1.model.DeletePublicMailboxAliasResp;
import com.lark.oapi.service.mail.v1.model.DeletePublicMailboxMemberReq;
import com.lark.oapi.service.mail.v1.model.DeletePublicMailboxMemberResp;
import com.lark.oapi.service.mail.v1.model.DeletePublicMailboxReq;
import com.lark.oapi.service.mail.v1.model.DeletePublicMailboxResp;
import com.lark.oapi.service.mail.v1.model.DeleteUserMailboxAliasReq;
import com.lark.oapi.service.mail.v1.model.DeleteUserMailboxAliasResp;
import com.lark.oapi.service.mail.v1.model.DeleteUserMailboxReq;
import com.lark.oapi.service.mail.v1.model.DeleteUserMailboxResp;
import com.lark.oapi.service.mail.v1.model.GetMailgroupMemberReq;
import com.lark.oapi.service.mail.v1.model.GetMailgroupMemberResp;
import com.lark.oapi.service.mail.v1.model.GetMailgroupPermissionMemberReq;
import com.lark.oapi.service.mail.v1.model.GetMailgroupPermissionMemberResp;
import com.lark.oapi.service.mail.v1.model.GetMailgroupReq;
import com.lark.oapi.service.mail.v1.model.GetMailgroupResp;
import com.lark.oapi.service.mail.v1.model.GetPublicMailboxMemberReq;
import com.lark.oapi.service.mail.v1.model.GetPublicMailboxMemberResp;
import com.lark.oapi.service.mail.v1.model.GetPublicMailboxReq;
import com.lark.oapi.service.mail.v1.model.GetPublicMailboxResp;
import com.lark.oapi.service.mail.v1.model.ListMailgroupAliasReq;
import com.lark.oapi.service.mail.v1.model.ListMailgroupAliasResp;
import com.lark.oapi.service.mail.v1.model.ListMailgroupMemberReq;
import com.lark.oapi.service.mail.v1.model.ListMailgroupMemberResp;
import com.lark.oapi.service.mail.v1.model.ListMailgroupPermissionMemberReq;
import com.lark.oapi.service.mail.v1.model.ListMailgroupPermissionMemberResp;
import com.lark.oapi.service.mail.v1.model.ListMailgroupReq;
import com.lark.oapi.service.mail.v1.model.ListMailgroupResp;
import com.lark.oapi.service.mail.v1.model.ListPublicMailboxAliasReq;
import com.lark.oapi.service.mail.v1.model.ListPublicMailboxAliasResp;
import com.lark.oapi.service.mail.v1.model.ListPublicMailboxMemberReq;
import com.lark.oapi.service.mail.v1.model.ListPublicMailboxMemberResp;
import com.lark.oapi.service.mail.v1.model.ListPublicMailboxReq;
import com.lark.oapi.service.mail.v1.model.ListPublicMailboxResp;
import com.lark.oapi.service.mail.v1.model.ListUserMailboxAliasReq;
import com.lark.oapi.service.mail.v1.model.ListUserMailboxAliasResp;
import com.lark.oapi.service.mail.v1.model.PatchMailgroupReq;
import com.lark.oapi.service.mail.v1.model.PatchMailgroupResp;
import com.lark.oapi.service.mail.v1.model.PatchPublicMailboxReq;
import com.lark.oapi.service.mail.v1.model.PatchPublicMailboxResp;
import com.lark.oapi.service.mail.v1.model.QueryUserReq;
import com.lark.oapi.service.mail.v1.model.QueryUserResp;
import com.lark.oapi.service.mail.v1.model.UpdateMailgroupReq;
import com.lark.oapi.service.mail.v1.model.UpdateMailgroupResp;
import com.lark.oapi.service.mail.v1.model.UpdatePublicMailboxReq;
import com.lark.oapi.service.mail.v1.model.UpdatePublicMailboxResp;

public class MailService {

  private final Mailgroup mailgroup;
  private final MailgroupAlias mailgroupAlias;
  private final MailgroupMember mailgroupMember;
  private final MailgroupPermissionMember mailgroupPermissionMember;
  private final PublicMailbox publicMailbox;
  private final PublicMailboxAlias publicMailboxAlias;
  private final PublicMailboxMember publicMailboxMember;
  private final User user;
  private final UserMailbox userMailbox;
  private final UserMailboxAlias userMailboxAlias;

  public MailService(Config config) {
    this.mailgroup = new Mailgroup(config);
    this.mailgroupAlias = new MailgroupAlias(config);
    this.mailgroupMember = new MailgroupMember(config);
    this.mailgroupPermissionMember = new MailgroupPermissionMember(config);
    this.publicMailbox = new PublicMailbox(config);
    this.publicMailboxAlias = new PublicMailboxAlias(config);
    this.publicMailboxMember = new PublicMailboxMember(config);
    this.user = new User(config);
    this.userMailbox = new UserMailbox(config);
    this.userMailboxAlias = new UserMailboxAlias(config);
  }

  public Mailgroup mailgroup() {
    return mailgroup;
  }

  public MailgroupAlias mailgroupAlias() {
    return mailgroupAlias;
  }

  public MailgroupMember mailgroupMember() {
    return mailgroupMember;
  }

  public MailgroupPermissionMember mailgroupPermissionMember() {
    return mailgroupPermissionMember;
  }

  public PublicMailbox publicMailbox() {
    return publicMailbox;
  }

  public PublicMailboxAlias publicMailboxAlias() {
    return publicMailboxAlias;
  }

  public PublicMailboxMember publicMailboxMember() {
    return publicMailboxMember;
  }

  public User user() {
    return user;
  }

  public UserMailbox userMailbox() {
    return userMailbox;
  }

  public UserMailboxAlias userMailboxAlias() {
    return userMailboxAlias;
  }

  public static class Mailgroup {

    private final Config config;

    public Mailgroup(Config config) {
      this.config = config;
    }

    public CreateMailgroupResp create(CreateMailgroupReq req, RequestOptions reqOptions)
        throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      Boolean customSupportLong2Str = reqOptions.isSupportLong2String();
      reqOptions.setSupportLong2String(true);
      if (customSupportLong2Str != null) {
        reqOptions.setSupportLong2String(customSupportLong2Str);
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "POST"
          , "/open-apis/mail/v1/mailgroups"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      CreateMailgroupResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          CreateMailgroupResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public CreateMailgroupResp create(CreateMailgroupReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();
      reqOptions.setSupportLong2String(true);

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "POST"
          , "/open-apis/mail/v1/mailgroups"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      CreateMailgroupResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          CreateMailgroupResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public DeleteMailgroupResp delete(DeleteMailgroupReq req, RequestOptions reqOptions)
        throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      Boolean customSupportLong2Str = reqOptions.isSupportLong2String();
      reqOptions.setSupportLong2String(true);
      if (customSupportLong2Str != null) {
        reqOptions.setSupportLong2String(customSupportLong2Str);
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "DELETE"
          , "/open-apis/mail/v1/mailgroups/:mailgroup_id"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      DeleteMailgroupResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          DeleteMailgroupResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public DeleteMailgroupResp delete(DeleteMailgroupReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();
      reqOptions.setSupportLong2String(true);

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "DELETE"
          , "/open-apis/mail/v1/mailgroups/:mailgroup_id"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      DeleteMailgroupResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          DeleteMailgroupResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public GetMailgroupResp get(GetMailgroupReq req, RequestOptions reqOptions) throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      Boolean customSupportLong2Str = reqOptions.isSupportLong2String();
      reqOptions.setSupportLong2String(true);
      if (customSupportLong2Str != null) {
        reqOptions.setSupportLong2String(customSupportLong2Str);
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/mail/v1/mailgroups/:mailgroup_id"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      GetMailgroupResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, GetMailgroupResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public GetMailgroupResp get(GetMailgroupReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();
      reqOptions.setSupportLong2String(true);

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/mail/v1/mailgroups/:mailgroup_id"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      GetMailgroupResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, GetMailgroupResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public ListMailgroupResp list(ListMailgroupReq req, RequestOptions reqOptions)
        throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      Boolean customSupportLong2Str = reqOptions.isSupportLong2String();
      reqOptions.setSupportLong2String(true);
      if (customSupportLong2Str != null) {
        reqOptions.setSupportLong2String(customSupportLong2Str);
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/mail/v1/mailgroups"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      ListMailgroupResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          ListMailgroupResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public ListMailgroupResp list(ListMailgroupReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();
      reqOptions.setSupportLong2String(true);

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/mail/v1/mailgroups"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      ListMailgroupResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          ListMailgroupResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public PatchMailgroupResp patch(PatchMailgroupReq req, RequestOptions reqOptions)
        throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      Boolean customSupportLong2Str = reqOptions.isSupportLong2String();
      reqOptions.setSupportLong2String(true);
      if (customSupportLong2Str != null) {
        reqOptions.setSupportLong2String(customSupportLong2Str);
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "PATCH"
          , "/open-apis/mail/v1/mailgroups/:mailgroup_id"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      PatchMailgroupResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          PatchMailgroupResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public PatchMailgroupResp patch(PatchMailgroupReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();
      reqOptions.setSupportLong2String(true);

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "PATCH"
          , "/open-apis/mail/v1/mailgroups/:mailgroup_id"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      PatchMailgroupResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          PatchMailgroupResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public UpdateMailgroupResp update(UpdateMailgroupReq req, RequestOptions reqOptions)
        throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      Boolean customSupportLong2Str = reqOptions.isSupportLong2String();
      reqOptions.setSupportLong2String(true);
      if (customSupportLong2Str != null) {
        reqOptions.setSupportLong2String(customSupportLong2Str);
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "PUT"
          , "/open-apis/mail/v1/mailgroups/:mailgroup_id"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      UpdateMailgroupResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          UpdateMailgroupResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public UpdateMailgroupResp update(UpdateMailgroupReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();
      reqOptions.setSupportLong2String(true);

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "PUT"
          , "/open-apis/mail/v1/mailgroups/:mailgroup_id"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      UpdateMailgroupResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          UpdateMailgroupResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }
  }

  public static class MailgroupAlias {

    private final Config config;

    public MailgroupAlias(Config config) {
      this.config = config;
    }

    public CreateMailgroupAliasResp create(CreateMailgroupAliasReq req, RequestOptions reqOptions)
        throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      Boolean customSupportLong2Str = reqOptions.isSupportLong2String();
      reqOptions.setSupportLong2String(true);
      if (customSupportLong2Str != null) {
        reqOptions.setSupportLong2String(customSupportLong2Str);
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "POST"
          , "/open-apis/mail/v1/mailgroups/:mailgroup_id/aliases"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      CreateMailgroupAliasResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          CreateMailgroupAliasResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public CreateMailgroupAliasResp create(CreateMailgroupAliasReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();
      reqOptions.setSupportLong2String(true);

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "POST"
          , "/open-apis/mail/v1/mailgroups/:mailgroup_id/aliases"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      CreateMailgroupAliasResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          CreateMailgroupAliasResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public DeleteMailgroupAliasResp delete(DeleteMailgroupAliasReq req, RequestOptions reqOptions)
        throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      Boolean customSupportLong2Str = reqOptions.isSupportLong2String();
      reqOptions.setSupportLong2String(true);
      if (customSupportLong2Str != null) {
        reqOptions.setSupportLong2String(customSupportLong2Str);
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "DELETE"
          , "/open-apis/mail/v1/mailgroups/:mailgroup_id/aliases/:alias_id"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      DeleteMailgroupAliasResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          DeleteMailgroupAliasResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public DeleteMailgroupAliasResp delete(DeleteMailgroupAliasReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();
      reqOptions.setSupportLong2String(true);

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "DELETE"
          , "/open-apis/mail/v1/mailgroups/:mailgroup_id/aliases/:alias_id"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      DeleteMailgroupAliasResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          DeleteMailgroupAliasResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public ListMailgroupAliasResp list(ListMailgroupAliasReq req, RequestOptions reqOptions)
        throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      Boolean customSupportLong2Str = reqOptions.isSupportLong2String();
      reqOptions.setSupportLong2String(true);
      if (customSupportLong2Str != null) {
        reqOptions.setSupportLong2String(customSupportLong2Str);
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/mail/v1/mailgroups/:mailgroup_id/aliases"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      ListMailgroupAliasResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          ListMailgroupAliasResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public ListMailgroupAliasResp list(ListMailgroupAliasReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();
      reqOptions.setSupportLong2String(true);

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/mail/v1/mailgroups/:mailgroup_id/aliases"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      ListMailgroupAliasResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          ListMailgroupAliasResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }
  }

  public static class MailgroupMember {

    private final Config config;

    public MailgroupMember(Config config) {
      this.config = config;
    }

    public CreateMailgroupMemberResp create(CreateMailgroupMemberReq req, RequestOptions reqOptions)
        throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      Boolean customSupportLong2Str = reqOptions.isSupportLong2String();
      reqOptions.setSupportLong2String(true);
      if (customSupportLong2Str != null) {
        reqOptions.setSupportLong2String(customSupportLong2Str);
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "POST"
          , "/open-apis/mail/v1/mailgroups/:mailgroup_id/members"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      CreateMailgroupMemberResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          CreateMailgroupMemberResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public CreateMailgroupMemberResp create(CreateMailgroupMemberReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();
      reqOptions.setSupportLong2String(true);

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "POST"
          , "/open-apis/mail/v1/mailgroups/:mailgroup_id/members"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      CreateMailgroupMemberResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          CreateMailgroupMemberResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public DeleteMailgroupMemberResp delete(DeleteMailgroupMemberReq req, RequestOptions reqOptions)
        throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      Boolean customSupportLong2Str = reqOptions.isSupportLong2String();
      reqOptions.setSupportLong2String(true);
      if (customSupportLong2Str != null) {
        reqOptions.setSupportLong2String(customSupportLong2Str);
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "DELETE"
          , "/open-apis/mail/v1/mailgroups/:mailgroup_id/members/:member_id"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      DeleteMailgroupMemberResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          DeleteMailgroupMemberResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public DeleteMailgroupMemberResp delete(DeleteMailgroupMemberReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();
      reqOptions.setSupportLong2String(true);

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "DELETE"
          , "/open-apis/mail/v1/mailgroups/:mailgroup_id/members/:member_id"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      DeleteMailgroupMemberResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          DeleteMailgroupMemberResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public GetMailgroupMemberResp get(GetMailgroupMemberReq req, RequestOptions reqOptions)
        throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      Boolean customSupportLong2Str = reqOptions.isSupportLong2String();
      reqOptions.setSupportLong2String(true);
      if (customSupportLong2Str != null) {
        reqOptions.setSupportLong2String(customSupportLong2Str);
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/mail/v1/mailgroups/:mailgroup_id/members/:member_id"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      GetMailgroupMemberResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          GetMailgroupMemberResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public GetMailgroupMemberResp get(GetMailgroupMemberReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();
      reqOptions.setSupportLong2String(true);

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/mail/v1/mailgroups/:mailgroup_id/members/:member_id"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      GetMailgroupMemberResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          GetMailgroupMemberResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public ListMailgroupMemberResp list(ListMailgroupMemberReq req, RequestOptions reqOptions)
        throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      Boolean customSupportLong2Str = reqOptions.isSupportLong2String();
      reqOptions.setSupportLong2String(true);
      if (customSupportLong2Str != null) {
        reqOptions.setSupportLong2String(customSupportLong2Str);
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/mail/v1/mailgroups/:mailgroup_id/members"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      ListMailgroupMemberResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          ListMailgroupMemberResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public ListMailgroupMemberResp list(ListMailgroupMemberReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();
      reqOptions.setSupportLong2String(true);

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/mail/v1/mailgroups/:mailgroup_id/members"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      ListMailgroupMemberResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          ListMailgroupMemberResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }
  }

  public static class MailgroupPermissionMember {

    private final Config config;

    public MailgroupPermissionMember(Config config) {
      this.config = config;
    }

    public CreateMailgroupPermissionMemberResp create(CreateMailgroupPermissionMemberReq req,
        RequestOptions reqOptions) throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      Boolean customSupportLong2Str = reqOptions.isSupportLong2String();
      reqOptions.setSupportLong2String(true);
      if (customSupportLong2Str != null) {
        reqOptions.setSupportLong2String(customSupportLong2Str);
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "POST"
          , "/open-apis/mail/v1/mailgroups/:mailgroup_id/permission_members"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      CreateMailgroupPermissionMemberResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          CreateMailgroupPermissionMemberResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public CreateMailgroupPermissionMemberResp create(CreateMailgroupPermissionMemberReq req)
        throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();
      reqOptions.setSupportLong2String(true);

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "POST"
          , "/open-apis/mail/v1/mailgroups/:mailgroup_id/permission_members"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      CreateMailgroupPermissionMemberResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          CreateMailgroupPermissionMemberResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public DeleteMailgroupPermissionMemberResp delete(DeleteMailgroupPermissionMemberReq req,
        RequestOptions reqOptions) throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      Boolean customSupportLong2Str = reqOptions.isSupportLong2String();
      reqOptions.setSupportLong2String(true);
      if (customSupportLong2Str != null) {
        reqOptions.setSupportLong2String(customSupportLong2Str);
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "DELETE"
          , "/open-apis/mail/v1/mailgroups/:mailgroup_id/permission_members/:permission_member_id"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      DeleteMailgroupPermissionMemberResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          DeleteMailgroupPermissionMemberResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public DeleteMailgroupPermissionMemberResp delete(DeleteMailgroupPermissionMemberReq req)
        throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();
      reqOptions.setSupportLong2String(true);

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "DELETE"
          , "/open-apis/mail/v1/mailgroups/:mailgroup_id/permission_members/:permission_member_id"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      DeleteMailgroupPermissionMemberResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          DeleteMailgroupPermissionMemberResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public GetMailgroupPermissionMemberResp get(GetMailgroupPermissionMemberReq req,
        RequestOptions reqOptions) throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      Boolean customSupportLong2Str = reqOptions.isSupportLong2String();
      reqOptions.setSupportLong2String(true);
      if (customSupportLong2Str != null) {
        reqOptions.setSupportLong2String(customSupportLong2Str);
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/mail/v1/mailgroups/:mailgroup_id/permission_members/:permission_member_id"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      GetMailgroupPermissionMemberResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          GetMailgroupPermissionMemberResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public GetMailgroupPermissionMemberResp get(GetMailgroupPermissionMemberReq req)
        throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();
      reqOptions.setSupportLong2String(true);

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/mail/v1/mailgroups/:mailgroup_id/permission_members/:permission_member_id"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      GetMailgroupPermissionMemberResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          GetMailgroupPermissionMemberResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public ListMailgroupPermissionMemberResp list(ListMailgroupPermissionMemberReq req,
        RequestOptions reqOptions) throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      Boolean customSupportLong2Str = reqOptions.isSupportLong2String();
      reqOptions.setSupportLong2String(true);
      if (customSupportLong2Str != null) {
        reqOptions.setSupportLong2String(customSupportLong2Str);
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/mail/v1/mailgroups/:mailgroup_id/permission_members"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      ListMailgroupPermissionMemberResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          ListMailgroupPermissionMemberResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public ListMailgroupPermissionMemberResp list(ListMailgroupPermissionMemberReq req)
        throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();
      reqOptions.setSupportLong2String(true);

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/mail/v1/mailgroups/:mailgroup_id/permission_members"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      ListMailgroupPermissionMemberResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          ListMailgroupPermissionMemberResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }
  }

  public static class PublicMailbox {

    private final Config config;

    public PublicMailbox(Config config) {
      this.config = config;
    }

    public CreatePublicMailboxResp create(CreatePublicMailboxReq req, RequestOptions reqOptions)
        throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      Boolean customSupportLong2Str = reqOptions.isSupportLong2String();
      reqOptions.setSupportLong2String(true);
      if (customSupportLong2Str != null) {
        reqOptions.setSupportLong2String(customSupportLong2Str);
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "POST"
          , "/open-apis/mail/v1/public_mailboxes"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      CreatePublicMailboxResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          CreatePublicMailboxResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public CreatePublicMailboxResp create(CreatePublicMailboxReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();
      reqOptions.setSupportLong2String(true);

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "POST"
          , "/open-apis/mail/v1/public_mailboxes"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      CreatePublicMailboxResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          CreatePublicMailboxResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public DeletePublicMailboxResp delete(DeletePublicMailboxReq req, RequestOptions reqOptions)
        throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      Boolean customSupportLong2Str = reqOptions.isSupportLong2String();
      reqOptions.setSupportLong2String(true);
      if (customSupportLong2Str != null) {
        reqOptions.setSupportLong2String(customSupportLong2Str);
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "DELETE"
          , "/open-apis/mail/v1/public_mailboxes/:public_mailbox_id"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      DeletePublicMailboxResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          DeletePublicMailboxResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public DeletePublicMailboxResp delete(DeletePublicMailboxReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();
      reqOptions.setSupportLong2String(true);

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "DELETE"
          , "/open-apis/mail/v1/public_mailboxes/:public_mailbox_id"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      DeletePublicMailboxResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          DeletePublicMailboxResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public GetPublicMailboxResp get(GetPublicMailboxReq req, RequestOptions reqOptions)
        throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      Boolean customSupportLong2Str = reqOptions.isSupportLong2String();
      reqOptions.setSupportLong2String(true);
      if (customSupportLong2Str != null) {
        reqOptions.setSupportLong2String(customSupportLong2Str);
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/mail/v1/public_mailboxes/:public_mailbox_id"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      GetPublicMailboxResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          GetPublicMailboxResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public GetPublicMailboxResp get(GetPublicMailboxReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();
      reqOptions.setSupportLong2String(true);

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/mail/v1/public_mailboxes/:public_mailbox_id"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      GetPublicMailboxResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          GetPublicMailboxResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public ListPublicMailboxResp list(ListPublicMailboxReq req, RequestOptions reqOptions)
        throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      Boolean customSupportLong2Str = reqOptions.isSupportLong2String();
      reqOptions.setSupportLong2String(true);
      if (customSupportLong2Str != null) {
        reqOptions.setSupportLong2String(customSupportLong2Str);
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/mail/v1/public_mailboxes"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      ListPublicMailboxResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          ListPublicMailboxResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public ListPublicMailboxResp list(ListPublicMailboxReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();
      reqOptions.setSupportLong2String(true);

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/mail/v1/public_mailboxes"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      ListPublicMailboxResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          ListPublicMailboxResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public PatchPublicMailboxResp patch(PatchPublicMailboxReq req, RequestOptions reqOptions)
        throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      Boolean customSupportLong2Str = reqOptions.isSupportLong2String();
      reqOptions.setSupportLong2String(true);
      if (customSupportLong2Str != null) {
        reqOptions.setSupportLong2String(customSupportLong2Str);
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "PATCH"
          , "/open-apis/mail/v1/public_mailboxes/:public_mailbox_id"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      PatchPublicMailboxResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          PatchPublicMailboxResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public PatchPublicMailboxResp patch(PatchPublicMailboxReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();
      reqOptions.setSupportLong2String(true);

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "PATCH"
          , "/open-apis/mail/v1/public_mailboxes/:public_mailbox_id"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      PatchPublicMailboxResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          PatchPublicMailboxResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public UpdatePublicMailboxResp update(UpdatePublicMailboxReq req, RequestOptions reqOptions)
        throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      Boolean customSupportLong2Str = reqOptions.isSupportLong2String();
      reqOptions.setSupportLong2String(true);
      if (customSupportLong2Str != null) {
        reqOptions.setSupportLong2String(customSupportLong2Str);
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "PUT"
          , "/open-apis/mail/v1/public_mailboxes/:public_mailbox_id"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      UpdatePublicMailboxResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          UpdatePublicMailboxResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public UpdatePublicMailboxResp update(UpdatePublicMailboxReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();
      reqOptions.setSupportLong2String(true);

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "PUT"
          , "/open-apis/mail/v1/public_mailboxes/:public_mailbox_id"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      UpdatePublicMailboxResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          UpdatePublicMailboxResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }
  }

  public static class PublicMailboxAlias {

    private final Config config;

    public PublicMailboxAlias(Config config) {
      this.config = config;
    }

    public CreatePublicMailboxAliasResp create(CreatePublicMailboxAliasReq req,
        RequestOptions reqOptions) throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      Boolean customSupportLong2Str = reqOptions.isSupportLong2String();
      reqOptions.setSupportLong2String(true);
      if (customSupportLong2Str != null) {
        reqOptions.setSupportLong2String(customSupportLong2Str);
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "POST"
          , "/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/aliases"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      CreatePublicMailboxAliasResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          CreatePublicMailboxAliasResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public CreatePublicMailboxAliasResp create(CreatePublicMailboxAliasReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();
      reqOptions.setSupportLong2String(true);

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "POST"
          , "/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/aliases"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      CreatePublicMailboxAliasResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          CreatePublicMailboxAliasResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public DeletePublicMailboxAliasResp delete(DeletePublicMailboxAliasReq req,
        RequestOptions reqOptions) throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      Boolean customSupportLong2Str = reqOptions.isSupportLong2String();
      reqOptions.setSupportLong2String(true);
      if (customSupportLong2Str != null) {
        reqOptions.setSupportLong2String(customSupportLong2Str);
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "DELETE"
          , "/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/aliases/:alias_id"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      DeletePublicMailboxAliasResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          DeletePublicMailboxAliasResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public DeletePublicMailboxAliasResp delete(DeletePublicMailboxAliasReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();
      reqOptions.setSupportLong2String(true);

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "DELETE"
          , "/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/aliases/:alias_id"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      DeletePublicMailboxAliasResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          DeletePublicMailboxAliasResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public ListPublicMailboxAliasResp list(ListPublicMailboxAliasReq req, RequestOptions reqOptions)
        throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      Boolean customSupportLong2Str = reqOptions.isSupportLong2String();
      reqOptions.setSupportLong2String(true);
      if (customSupportLong2Str != null) {
        reqOptions.setSupportLong2String(customSupportLong2Str);
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/aliases"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      ListPublicMailboxAliasResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          ListPublicMailboxAliasResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public ListPublicMailboxAliasResp list(ListPublicMailboxAliasReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();
      reqOptions.setSupportLong2String(true);

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/aliases"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      ListPublicMailboxAliasResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          ListPublicMailboxAliasResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }
  }

  public static class PublicMailboxMember {

    private final Config config;

    public PublicMailboxMember(Config config) {
      this.config = config;
    }

    public ClearPublicMailboxMemberResp clear(ClearPublicMailboxMemberReq req,
        RequestOptions reqOptions) throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      Boolean customSupportLong2Str = reqOptions.isSupportLong2String();
      reqOptions.setSupportLong2String(true);
      if (customSupportLong2Str != null) {
        reqOptions.setSupportLong2String(customSupportLong2Str);
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "POST"
          , "/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/members/clear"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      ClearPublicMailboxMemberResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          ClearPublicMailboxMemberResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public ClearPublicMailboxMemberResp clear(ClearPublicMailboxMemberReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();
      reqOptions.setSupportLong2String(true);

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "POST"
          , "/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/members/clear"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      ClearPublicMailboxMemberResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          ClearPublicMailboxMemberResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public CreatePublicMailboxMemberResp create(CreatePublicMailboxMemberReq req,
        RequestOptions reqOptions) throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      Boolean customSupportLong2Str = reqOptions.isSupportLong2String();
      reqOptions.setSupportLong2String(true);
      if (customSupportLong2Str != null) {
        reqOptions.setSupportLong2String(customSupportLong2Str);
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "POST"
          , "/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/members"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      CreatePublicMailboxMemberResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          CreatePublicMailboxMemberResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public CreatePublicMailboxMemberResp create(CreatePublicMailboxMemberReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();
      reqOptions.setSupportLong2String(true);

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "POST"
          , "/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/members"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      CreatePublicMailboxMemberResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          CreatePublicMailboxMemberResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public DeletePublicMailboxMemberResp delete(DeletePublicMailboxMemberReq req,
        RequestOptions reqOptions) throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      Boolean customSupportLong2Str = reqOptions.isSupportLong2String();
      reqOptions.setSupportLong2String(true);
      if (customSupportLong2Str != null) {
        reqOptions.setSupportLong2String(customSupportLong2Str);
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "DELETE"
          , "/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/members/:member_id"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      DeletePublicMailboxMemberResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          DeletePublicMailboxMemberResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public DeletePublicMailboxMemberResp delete(DeletePublicMailboxMemberReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();
      reqOptions.setSupportLong2String(true);

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "DELETE"
          , "/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/members/:member_id"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      DeletePublicMailboxMemberResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          DeletePublicMailboxMemberResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public GetPublicMailboxMemberResp get(GetPublicMailboxMemberReq req, RequestOptions reqOptions)
        throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      Boolean customSupportLong2Str = reqOptions.isSupportLong2String();
      reqOptions.setSupportLong2String(true);
      if (customSupportLong2Str != null) {
        reqOptions.setSupportLong2String(customSupportLong2Str);
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/members/:member_id"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      GetPublicMailboxMemberResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          GetPublicMailboxMemberResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public GetPublicMailboxMemberResp get(GetPublicMailboxMemberReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();
      reqOptions.setSupportLong2String(true);

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/members/:member_id"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      GetPublicMailboxMemberResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          GetPublicMailboxMemberResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public ListPublicMailboxMemberResp list(ListPublicMailboxMemberReq req,
        RequestOptions reqOptions) throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      Boolean customSupportLong2Str = reqOptions.isSupportLong2String();
      reqOptions.setSupportLong2String(true);
      if (customSupportLong2Str != null) {
        reqOptions.setSupportLong2String(customSupportLong2Str);
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/members"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      ListPublicMailboxMemberResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          ListPublicMailboxMemberResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public ListPublicMailboxMemberResp list(ListPublicMailboxMemberReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();
      reqOptions.setSupportLong2String(true);

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/members"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      ListPublicMailboxMemberResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          ListPublicMailboxMemberResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }
  }

  public static class User {

    private final Config config;

    public User(Config config) {
      this.config = config;
    }

    public QueryUserResp query(QueryUserReq req, RequestOptions reqOptions) throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      Boolean customSupportLong2Str = reqOptions.isSupportLong2String();
      reqOptions.setSupportLong2String(true);
      if (customSupportLong2Str != null) {
        reqOptions.setSupportLong2String(customSupportLong2Str);
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "POST"
          , "/open-apis/mail/v1/users/query"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      QueryUserResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, QueryUserResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public QueryUserResp query(QueryUserReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();
      reqOptions.setSupportLong2String(true);

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "POST"
          , "/open-apis/mail/v1/users/query"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      QueryUserResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse, QueryUserResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }
  }

  public static class UserMailbox {

    private final Config config;

    public UserMailbox(Config config) {
      this.config = config;
    }

    public DeleteUserMailboxResp delete(DeleteUserMailboxReq req, RequestOptions reqOptions)
        throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      Boolean customSupportLong2Str = reqOptions.isSupportLong2String();
      reqOptions.setSupportLong2String(true);
      if (customSupportLong2Str != null) {
        reqOptions.setSupportLong2String(customSupportLong2Str);
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "DELETE"
          , "/open-apis/mail/v1/user_mailboxes/:user_mailbox_id"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      DeleteUserMailboxResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          DeleteUserMailboxResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public DeleteUserMailboxResp delete(DeleteUserMailboxReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();
      reqOptions.setSupportLong2String(true);

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "DELETE"
          , "/open-apis/mail/v1/user_mailboxes/:user_mailbox_id"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      DeleteUserMailboxResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          DeleteUserMailboxResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }
  }

  public static class UserMailboxAlias {

    private final Config config;

    public UserMailboxAlias(Config config) {
      this.config = config;
    }

    public CreateUserMailboxAliasResp create(CreateUserMailboxAliasReq req,
        RequestOptions reqOptions) throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      Boolean customSupportLong2Str = reqOptions.isSupportLong2String();
      reqOptions.setSupportLong2String(true);
      if (customSupportLong2Str != null) {
        reqOptions.setSupportLong2String(customSupportLong2Str);
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "POST"
          , "/open-apis/mail/v1/user_mailboxes/:user_mailbox_id/aliases"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      CreateUserMailboxAliasResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          CreateUserMailboxAliasResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public CreateUserMailboxAliasResp create(CreateUserMailboxAliasReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();
      reqOptions.setSupportLong2String(true);

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "POST"
          , "/open-apis/mail/v1/user_mailboxes/:user_mailbox_id/aliases"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      CreateUserMailboxAliasResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          CreateUserMailboxAliasResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public DeleteUserMailboxAliasResp delete(DeleteUserMailboxAliasReq req,
        RequestOptions reqOptions) throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      Boolean customSupportLong2Str = reqOptions.isSupportLong2String();
      reqOptions.setSupportLong2String(true);
      if (customSupportLong2Str != null) {
        reqOptions.setSupportLong2String(customSupportLong2Str);
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "DELETE"
          , "/open-apis/mail/v1/user_mailboxes/:user_mailbox_id/aliases/:alias_id"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      DeleteUserMailboxAliasResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          DeleteUserMailboxAliasResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public DeleteUserMailboxAliasResp delete(DeleteUserMailboxAliasReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();
      reqOptions.setSupportLong2String(true);

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "DELETE"
          , "/open-apis/mail/v1/user_mailboxes/:user_mailbox_id/aliases/:alias_id"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      DeleteUserMailboxAliasResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          DeleteUserMailboxAliasResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public ListUserMailboxAliasResp list(ListUserMailboxAliasReq req, RequestOptions reqOptions)
        throws Exception {
      // 请求参数选项
      if (reqOptions == null) {
        reqOptions = new RequestOptions();
      }

      Boolean customSupportLong2Str = reqOptions.isSupportLong2String();
      reqOptions.setSupportLong2String(true);
      if (customSupportLong2Str != null) {
        reqOptions.setSupportLong2String(customSupportLong2Str);
      }

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/mail/v1/user_mailboxes/:user_mailbox_id/aliases"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      ListUserMailboxAliasResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          ListUserMailboxAliasResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }

    public ListUserMailboxAliasResp list(ListUserMailboxAliasReq req) throws Exception {
      // 请求参数选项
      RequestOptions reqOptions = new RequestOptions();
      reqOptions.setSupportLong2String(true);

      // 发起请求
      RawResponse httpResponse = Transport.send(config, reqOptions, "GET"
          , "/open-apis/mail/v1/user_mailboxes/:user_mailbox_id/aliases"
          , Sets.newHashSet(AccessTokenType.Tenant)
          , req);

      // 反序列化
      ListUserMailboxAliasResp resp = UnmarshalRespUtil.unmarshalResp(httpResponse,
          ListUserMailboxAliasResp.class);
      resp.setRawResponse(httpResponse);
      resp.setRequest(req);

      return resp;
    }
  }

}